















































































































































































































































































































































































































































































































































		; \
	      :; \
	}
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#  ------     -----------        ------
# --------
# --------
# --------
# --------
# --------
# --------
# --------
# --------
# --------
# --------
# --------
# --------
# ------------------------
# ------------------------
# -----------------------------
# -----------------------------
# -----------------------------
# -----------------------------
# -------------------------------
# -------------------------------
# -------------------------------------------
# -------------------------------------------
# ---------------------------------------------------
# ---------------------------------------------------
# -----------------------------------------------------
# -----------------------------------------------------
	    [ "$$prop" = "none" ] && continue; \
	  "$$target"
# $(1): variable containing entries to iterate over
# $(2): output file
$(ALL_GTFILES_H) gtype-desc.c gtype-desc.h gtype.state: s-gtype ; @true
       $(ALL_GTFILES_H) gtype-desc.c gtype-desc.h version.h \
$(ALL_HOST_BACKEND_OBJS): ALL_COMPILERFLAGS += -fauto-profile=cc1plus.fda
$(ALL_HOST_BACKEND_OBJS): cc1plus.fda
$(ALL_HOST_OBJS) : | $(generated_files)
	$(AR) $(AR_FLAGS) libbackend.a $(OBJS)
	$(AR) $(AR_FLAGS) libcommon.a $(OBJS-libcommon)
	$(AR) $(AR_FLAGS) libcommon-target.a $(OBJS-libcommon-target)
	$(AR) $(AR_FLAGS)T libbackend.a $(OBJS)
		$(AR_OBJS) $(LIBS) $(AR_LIBS)
		$(AR_OBJS) $(LIBS) $(AR_LIBS)
		$(AR_OBJS) $(LIBS) $(AR_LIBS)
	$(AWK) -f $(srcdir)/gen-pass-instances.awk \
	$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/opt-read.awk \
	$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/opt-read.awk \
	$(AWK) -f $(srcdir)/opt-functions.awk -f $(srcdir)/opt-read.awk \
	$(AWK) -f $(srcdir)/opt-gather.awk $(ALL_OPT_FILES) > tmp-optionlist
  $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(GGC_H)	\
  $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(VEC_H)	\
	$(BITMAP_H) sbitmap.h
		$(BITMAP_H) sbitmap.h $(BASIC_BLOCK_H) $(GIMPLE_H) \
  $(BUILD_ERRORS) build/vec.o build/hash-table.o build/sort.o
	$(build_file_translate) echo @set srcdir `echo $(abs_srcdir) | sed -e 's|\\([@{}]\\)|@\\1|g'` >> $@T
$(build_htmldir)/cpp/index.html: $(TEXI_CPP_FILES)
       $(build_htmldir)/cppinternals
$(build_htmldir)/cppinternals/index.html: $(TEXI_CPPINT_FILES)
       $(build_htmldir)/cppinternals/index.html lang.html
$(build_htmldir)/gcc/index.html: $(TEXI_GCC_FILES)
       $(build_htmldir)/gccinstall $(build_htmldir)/gccint \
       $(build_htmldir)/gccinstall/index.html $(build_htmldir)/gccint/index.html \
$(build_htmldir)/gccinstall/index.html: $(TEXI_GCCINSTALL_FILES)
$(build_htmldir)/gccint/index.html: $(TEXI_GCCINT_FILES)
$(build_htmldir)/%/index.html: %.texi
  $(build_objdir)/fixincludes/fixincl \
  $(build_objdir)/fixincludes/fixinc.sh
../$(build_subdir)/fixincludes/fixincl: ; @ :
	        $(BUILD_SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS) ); \
	$(BUILTINS_DEF) $(INPUT_H) statistics.h \
	@: $(call write_entries_to_file,$(GTFILES),tmp-gi.list)
	$(C_COMMON_H) $(TREE_H)
  $(C_COMMON_H) c-family/c-objc.h $(C_PRETTY_PRINT_H) \
  $(CFLAGS) $(INTERNAL_CFLAGS) $(COVERAGE_FLAGS) $(WARN_CFLAGS) @DEFS@
		$(CGRAPH_H) $(VEC_H) $(HASH_TABLE_H) $(TREE_H) $(GIMPLE_H) \
		$(check_p_numbers)))
  $(COLLECT2_OBJS) $(EXTRA_GCC_OBJS) $(GCOV_OBJS) $(GCOV_DUMP_OBJS) \
		$(COLLECT2_OBJS) $(LIBS) $(COLLECT2_LIBS)
$(common_out_object_file): $(common_out_file)
  $(COMMON_TARGET_DEF) $(D_TARGET_DEF) $(BCONFIG_H) $(SYSTEM_H) errors.h
	$(COMPILE) $<
	$(COMPILE) $<
	$(COMPILE) $<
	$(COMPILE) $<
	$(COMPILE) $<
	+$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	+$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
	+$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -o $@ $<
	$(COMPILER_FOR_BUILD) -c $(BUILD_COMPILERFLAGS) $(BUILD_CPPFLAGS) \
		$(CONFIG_H) $(SYSTEM_H) $(HASHTAB_H)
  $(CORETYPES_H)
  $(CORETYPES_H) $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) errors.h		\
  $(CORETYPES_H) $(GTM_H) $(RTL_BASE_H) errors.h $(READ_MD_H)		\
  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H)
  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H)
  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H) optabs.def
  $(CORETYPES_H) $(GTM_H) errors.h $(GENSUPPORT_H) toplev.h		\
  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)
  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)
  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)
  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)		\
  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) $(OBSTACK_H)
  $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H) internal-fn.def
  $(CORETYPES_H) $(GTM_H) insn-constants.h				\
  $(CORETYPES_H) $(HASH_TABLE_H) $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H)
  $(CORETYPES_H) errors.h $(HASH_TABLE_H) hash-map.h $(GGC_H) is-a.h \
  $(CORETYPES_H) errors.h $(HASH_TABLE_H) hash-set.h builtins.def	\
  $(CORETYPES_H) errors.h $(READ_MD_H)
  $(CORETYPES_H) errors.h $(READ_MD_H)
  $(COVERAGE_FLAGS) $(ALIASING_FLAGS) $(NOEXCEPTION_FLAGS) \
	   $(CPPINC) $(CODYINC) $(GMPINC) $(DECNUMINC) $(BACKTRACEINC) \
	$(CPPLIB) $(LIBDECNUMBER)
# $(CXX) to pick up -lstdc++.
	$(DESTDIR)$(infodir)/cpp.info \
	$(DESTDIR)$(infodir)/cppinternals.info \
	$(DESTDIR)$(infodir)/gcc.info \
	$(DESTDIR)$(infodir)/gccinstall.info \
	$(DESTDIR)$(infodir)/gccint.info \
$(DESTDIR)$(infodir)/%.info: doc/%.info installdirs
	  $(DESTDIR)$(itoolsdatadir)/gsyslimits.h
		> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf
		>> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf
		>> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf
		$(DESTDIR)$(itoolsdir)/mkinstalldirs ; \
	$(DESTDIR)$(man1dir)/$(CPP_INSTALL_NAME)$(man1ext) \
$(DESTDIR)$(man1dir)/$(CPP_INSTALL_NAME)$(man1ext): doc/cpp.1 installdirs
	$(DESTDIR)$(man1dir)/$(GCC_INSTALL_NAME)$(man1ext) \
$(DESTDIR)$(man1dir)/$(GCC_INSTALL_NAME)$(man1ext): doc/gcc.1 installdirs
	$(DESTDIR)$(man1dir)/$(GCOV_DUMP_INSTALL_NAME)$(man1ext) \
$(DESTDIR)$(man1dir)/$(GCOV_DUMP_INSTALL_NAME)$(man1ext): doc/gcov-dump.1 installdirs
	$(DESTDIR)$(man1dir)/$(GCOV_INSTALL_NAME)$(man1ext) \
$(DESTDIR)$(man1dir)/$(GCOV_INSTALL_NAME)$(man1ext): doc/gcov.1 installdirs
	$(DESTDIR)$(man1dir)/$(GCOV_TOOL_INSTALL_NAME)$(man1ext) \
$(DESTDIR)$(man1dir)/$(GCOV_TOOL_INSTALL_NAME)$(man1ext): doc/gcov-tool.1 installdirs
$(DESTDIR)$(man1dir)/$(LTO_DUMP_INSTALL_NAME)$(man1ext): doc/lto-dump.1 installdirs
$(DESTDIR)$(man7dir)/%$(man7ext): doc/%.7 installdirs
	$(DESTDIR)$(man7dir)/fsf-funding$(man7ext) \
	$(DESTDIR)$(man7dir)/gfdl$(man7ext) \
	$(DESTDIR)$(man7dir)/gpl$(man7ext)
  $(DIAGNOSTIC_CORE_H)
    $(dir $(obj))$(DEPDIR)/$(patsubst %.o,%.Po,$(notdir $(obj))))
	$(ETAGS) --include TAGS.sub $$incs)
	$(ETAGS) -o TAGS.sub c-family/*.h c-family/*.c  \
  $(EXCEPT_H) tm-constrs.h)
  $(EXCEPT_H) tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H) \
# $(exec_prefix), expressed as a path relative to $(prefix).
  $(EXPR_H)
	  $(EXTRA_GCC_LIBS) $(LIBS)
	  $(EXTRA_GCC_LIBS) $(LIBS)
	$(EXTRA_GCC_OBJS)
	$(EXTRA_GCC_OBJS)
	 $(EXTRA_HEADERS)
	$(EXTRA_OBJS) \
	$(EXTRA_PROGRAMS) $(COLLECT2) lto-wrapper$(exeext) \
 $(EXTRA_PROGRAMS) gcc-cross$(exeext) \
			     $(filter %.c, $(GTFILES)))) \
	  $(filter insn-conditions.md,$^) > tmp-$*.cc
	  $(filter insn-conditions.md,$^) > tmp-$*.h
	    $(filter-out $(BUILD_LIBDEPS), $^) $(BUILD_LIBS)
	$(filter-out [%], $(GTFILES)) gtyp-input.list
$(filter-out $(lang_checks_parallelized),$(lang_checks)): check-% : site.exp
	    $(filter-out $(LIBDEPS), $^) $(LIBS)
  $(filter-out insn-flags.h, $(RTL_H) $(TM_P_H) $(FUNCTION_H) $(REGS_H) \
  $(FIXED_VALUE_H) alias.h $(HASHTAB_H)
	-$(FLEX) $(FLEXFLAGS) -o$@ $< && { \
$(foreach file,$(ALL_HOST_FRONTEND_OBJS),$(eval CFLAGS-$(file) += -DIN_GCC_FRONTEND))
	$(foreach header_var,$(shell sed < Makefile -n -e 's/^\([A-Z0-9_]*_H\)[ 	]*=.*/\1/p'),echo $(header_var)=$(shell echo $($(header_var):$(srcdir)/%=.../%) | sed -e 's~\.\.\./config/~config/~' -e 's~\.\.\./common/config/~common/config/~' -e 's~\.\.\.[^ 	]*/~~g') >> tmp-header-vars;)
  $(foreach obj,$(ALL_HOST_OBJS),\
	$(foreach range, \
$(FULL_DRIVER_NAME): ./xgcc$(exeext)
	$(GCC_FOR_TARGET) -dumpspecs > tmp-specs
	      && [ "$(GCC_INSTALL_NAME)" != "$(GCC_TARGET_INSTALL_NAME)" ]; then \
# $(GCC_WARN_CFLAGS), or nothing.  Similarly, WARN_CXXFLAGS will be
		$(GCOV_IO_H) $(DIAGNOSTIC_H) alloc-pool.h
  $(GCOV_TOOL_OBJS) $(GENGTYPE_OBJS) gcc-ar.o gcc-nm.o gcc-ranlib.o \
$(genprog:%=build/gen%$(build_exeext)): build/gen%$(build_exeext): build/gen%.o $(BUILD_LIBDEPS)
$(genprogerr:%=build/gen%$(build_exeext)): $(BUILD_ERRORS)
$(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_MD)
$(genprogrtl:%=build/gen%$(build_exeext)): $(BUILD_RTL)
  $(GENSUPPORT_H)
  $(GENSUPPORT_H) $(HASH_TABLE_H) target-insns.def
  $(GGC_H)
	$(GGC_H) $(BASIC_BLOCK_H) $(TREE_H) tree-ssa-operands.h \
  $(GGC_H) $(TREE_DUMP_H) $(PRETTY_PRINT_H) $(OPTS_H) $(PARAMS_H) \
  $(GGC_H) toplev.h $(DIAGNOSTIC_CORE_H) $(HASH_TABLE_H)
	$(GMSGFMT) --statistics -o $@ $<
# $(GTFILES) may be too long to put on a command line, so we have to
  $(GTM_H) $(RTL_BASE_H)
  $(GTM_H) $(RTL_BASE_H) $(OBSTACK_H) $(HASHTAB_H) $(READ_MD_H)		\
		$(HASHTAB_H) $(CGRAPH_H) $(IPA_REFERENCE_H) \
  $(HASHTAB_H) $(GENSUPPORT_H) $(FNMATCH_H)
  $(HASHTAB_H) $(OBSTACK_H) $(XREGEX_H)
  $(HASHTAB_H) $(READ_MD_H) $(GENSUPPORT_H) $(HASH_TABLE_H)
  $(HASHTAB_H) errors.h $(READ_MD_H)
  $(HASHTAB_H) inchash.h
  $(HASHTAB_H) machmode.def $(extra_modes_file)
  $(HASH_TABLE_H) inchash.h
	    && [ "${host}" != "${target}" ]; then \
	$(host_hook_obj)
  $(host_xm_file_list) \
  $(host_xm_file_list) $(host_xm_include_list) $(xm_include_list) \
	-$(if $(check_p_subno),@)(rootme=`${PWD_COMMAND}`; export rootme; \
  "\"$(if $(DEVPHASE_c)$(filter-out 0,$(PATCHLEVEL_c)), $(DATESTAMP_c))\""
  "\"$(if $(DEVPHASE_c)$(filter-out 0,$(PATCHLEVEL_c)), $(REVISION_c))\""
	$(if $(filter yes,@enable_lto@),$(DESTDIR)$(man1dir)/$(LTO_DUMP_INSTALL_NAME)$(man1ext)) \
	   $(if $(filter yes,@enable_lto@),doc/lto-dump.1)
		$(if $(GCC_TEST_PARALLEL_SLOTS),$(GCC_TEST_PARALLEL_SLOTS),128), \
	    "$(if $(MULTILIB_OSDIRNAMES),,$(MULTIARCH_DIRNAME))" \
  $(if $(SHLIB),$(if $(filter yes,@enable_shared@),-DENABLE_SHARED_LIBGCC)) \
	-$(INSTALL_DATA) $< $@
	-$(INSTALL_DATA) $< $@
	-$(INSTALL_DATA) $< $@
	-$(INSTALL_DATA) $< $@
	-$(INSTALL_DATA) $< $@
	-$(INSTALL_DATA) $< $@
	-$(INSTALL_DATA) $< $@
	  $(INSTALL_DATA) $$cat $(DESTDIR)$$dir/gcc.mo; \
	  $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(dvidir)/gcc/$$f"; \
	    $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(htmldir)/$$f"; \
	    $(INSTALL_DATA) "$$d$$p"/* "$(DESTDIR)$(htmldir)/$$f"; \
	  $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(pdfdir)/gcc/$$f"; \
	    $(INSTALL_DATA) $$f $(DESTDIR)$(infodir)/$$realfile; \
	  $(INSTALL_DATA) $$path $(DESTDIR)$$dest; \
	$(INSTALL_DATA) $(srcdir)/gsyslimits.h \
	$(INSTALL_DATA) b-header-vars $(DESTDIR)$(plugin_includedir)/b-header-vars
	$(INSTALL_DATA) fixinc_list $(DESTDIR)$(itoolsdatadir)/fixinc_list
	$(INSTALL_DATA) gtype.state $(DESTDIR)$(plugin_resourcesdir)/gtype.state
	  $(INSTALL_DATA) include$${multi_dir}/limits.h $(DESTDIR)$(itoolsdatadir)/include$${multi_dir}/limits.h; \
	$(INSTALL_DATA) macro_list $(DESTDIR)$(itoolsdatadir)/macro_list
# $(INSTALL_DATA) might be a relative pathname, so we can't cd into srcdir
	    $(INSTALL_PROGRAM) \
	    $(INSTALL_PROGRAM) \
	    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libexecsubdir)/$$file; \
	    $(INSTALL_PROGRAM) $$file $(DESTDIR)$(libexecsubdir)/$$file; \
	    $(INSTALL_PROGRAM) $$i$(exeext) $(DESTDIR)$(bindir)/$$install_name$(exeext) ;\
	$(INSTALL_PROGRAM) collect2$(exeext) $(DESTDIR)$(libexecsubdir)/collect2$(exeext)
	    $(INSTALL_PROGRAM) gcov$(exeext) $(DESTDIR)$(bindir)/$(GCOV_INSTALL_NAME)$(exeext); \
	$(INSTALL_PROGRAM) gengtype$(exeext) $(DESTDIR)$(plugin_bindir)/gengtype$(exeext)
	$(INSTALL_PROGRAM) lto-wrapper$(exeext) $(DESTDIR)$(libexecsubdir)/lto-wrapper$(exeext)
	  $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext); \
	    $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(DESTDIR)$(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \
	-$(INSTALL_PROGRAM) xgcc$(exeext) $(DESTDIR)$(bindir)/$(GCC_INSTALL_NAME)$(exeext)
	$(INSTALL_PROGRAM) xgcc$(exeext) $(DESTDIR)$(libexecsubdir)/gcc$(exeext)
	$(INSTALL_SCRIPT) $(srcdir)/../mkinstalldirs \
  $(IPA_PROP_H) $(TARGET_H) $(RTL_H) $(TM_P_H) $(CFGLOOP_H) $(EMIT_RTL_H) \
	   $(ISLINC)
$(lang_checks_parallelized): check-% : site.exp
$(lang_checks_parallel): site.exp
	$(lang_tree_files) gimple.def
	$(LIBDECNUMBER) $(LIBBACKTRACE)
# $(libdir)/gcc/include isn't currently searched by cpp.
	$(LIBIBERTY) $(LIBDECNUMBER) $(HOST_LIBS)
		$(LIBS) -o $@
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) $(GCOV_DUMP_OBJS) \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) $(GCOV_OBJS) \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) $(GCOV_TOOL_OBJS) $(LIBS) -o $@
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) gcc-ar.o -o $@ \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) gcc-nm.o -o $@ \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) gcc-ranlib.o -o $@ \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o T$@ \
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o T$@ \
	+$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) \
	+$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) -o $@ \
		$(LN) $$install_name$(exeext) $$target_install_name$(exeext) ) ; \
	      $(LN) $(GCC_INSTALL_NAME)$(exeext) $(FULL_DRIVER_NAME) ); \
	      $(LN) $(GCC_INSTALL_NAME)$(exeext) $(target_noncanonical)-gcc-tmp$(exeext) && \
	$(LN_S) $< $@
	   $(LTO_WRAPPER_OBJS) libcommon-target.a $(LIBS)
	$(MACHMODE_H) version.h
	$(MAKE) $(FLAGS_TO_PASS) install
	$(MAKE) $(FLAGS_TO_PASS) stmp-int-hdrs
		$(MAKEINFO) $(MAKEINFOFLAGS) -I $(gcc_docdir) \
		$(MAKEINFO) $(MAKEINFOFLAGS) -I . -I $(gcc_docdir) \
	$(MAKE) lang.maintainer-clean distclean
	  $(MAKE) real-$(INSTALL_HEADERS_DIR) DESTDIR=`pwd`/../gcc/ \
	$(MAKE) srcextra
	  $(MAKE) TESTSUITEDIR="$(TESTSUITEDIR)" RUNTESTFLAGS="$(RUNTESTFLAGS)" \
	  $(MAKE) TESTSUITEDIR="$(TESTSUITEDIR)" RUNTESTFLAGS="$(RUNTESTFLAGS)" \
	$(MAKE) TESTSUITEDIR="testsuite.$$vardots" \
	    $(mkinstalldirs) $${fix_dir}; \
	  $(mkinstalldirs) $${include_dir}; \
	$(mkinstalldirs) $(@D)
	$(mkinstalldirs) $(@D)
	  $(mkinstalldirs) $(DESTDIR)$$dir; \
	  $(mkinstalldirs) $(DESTDIR)$$dir || exit 1; \
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	$(mkinstalldirs) $(DESTDIR)$(datadir)
	$(mkinstalldirs) $(DESTDIR)$(gcc_tooldir)
	    $(mkinstalldirs) "$(DESTDIR)$(htmldir)/$$f" || exit 1; \
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	$(mkinstalldirs) $(DESTDIR)$(infodir)
	$(mkinstalldirs) $(DESTDIR)$(itoolsdatadir)/include
	  $(mkinstalldirs) $(DESTDIR)$(itoolsdatadir)/include$${multi_dir}; \
	$(mkinstalldirs) $(DESTDIR)$(itoolsdir)
	$(mkinstalldirs) $(DESTDIR)$(libexecsubdir)
	$(mkinstalldirs) $(DESTDIR)$(libsubdir)
	$(mkinstalldirs) $(DESTDIR)$(libsubdir)/include
	$(mkinstalldirs) $(DESTDIR)$(man1dir)
	$(mkinstalldirs) $(DESTDIR)$(man7dir)
	$(mkinstalldirs) $(DESTDIR)$(plugin_bindir)
	$(mkinstalldirs) $(DESTDIR)$(plugin_includedir)
	$(mkinstalldirs) $(DESTDIR)$(plugin_resourcesdir)
	$(mkinstalldirs) po
	$(mkinstalldirs) po
	$(mkinstalldirs) po
	$(MSGMERGE) $< `if test -f po/gcc.pot; \
	    "$(MULTIARCH_DIRNAME)" '' no \
	    "$(MULTILIB_DIRNAMES)" \
	    "$(MULTILIB_EXCEPTIONS)" \
	    "$(MULTILIB_EXCLUSIONS)" \
	    "$(MULTILIB_EXTRA_OPTS)" \
	    "$(MULTILIB_MATCHES)" \
	    "$(MULTILIB_OPTIONS)" \
	    "$(MULTILIB_OSDIRNAMES)" \
	    "$(MULTILIB_REQUIRED)" \
	    "$(MULTILIB_REUSE)" \
	@$(NORMAL_INSTALL)
	@$(NORMAL_INSTALL)
	@$(NORMAL_INSTALL)
  $(OBJS-libcommon-target) main.o c-family/cppspec.o \
	$(out_object_file) \
$(out_object_file): $(out_file)
		     $(patsubst %,$(TESTSUITEDIR)/$*%,$(check_p_subdirs));\
			   $(patsubst %.c,%.h, \
	    $(patsubst %,check-parallel-$*_%, $(check_p_subdirs)); \
$(patsubst %,%-subtargets,$(lang_checks)): check-%-subtargets:
	-($(POD2MAN) --section=1 $< > $(@).T$$$$ && \
	-($(POD2MAN) --section=7 $< > $(@).T$$$$ && \
	$(POSTCOMPILE)
	$(POSTCOMPILE)
	$(POSTCOMPILE)
	$(POSTCOMPILE)
	$(POSTCOMPILE)
# $(prefix), expressed as a path relative to $(libsubdir).
	${QMTEST} -D ${QMTEST_DIR} create-tdb \
${QMTEST_DIR}/context: stamp-qmtest
${QMTEST_DIR} stamp-qmtest:
	-$(RANLIB) $(RANLIB_FLAGS) libbackend.a
	-$(RANLIB) $(RANLIB_FLAGS) libcommon.a
	-$(RANLIB) $(RANLIB_FLAGS) libcommon-target.a
  $(READ_MD_H) $(GENSUPPORT_H)
  $(READ_MD_H) $(GENSUPPORT_H) $(FNMATCH_H)
	$(REAL_H) $(FIXED_VALUE_H)
	    $(RECOG_H) $(REGS_H) function-abi.h obstack-utils.h \
  $(RECOG_H) output.h $(FLAGS_H) $(RESOURCE_H) toplev.h $(DIAGNOSTIC_CORE_H) reload.h 	\
  $(RTL_H) $(GGC_H) errors.h
	$(RUN_GEN) build/gen$*$(build_exeext) $(md_file) \
	$(RUN_GEN) build/gen$*$(build_exeext) $(md_file) \
	$(RUN_GEN) build/genattrtab$(build_exeext) $(md_file) insn-conditions.md \
	$(RUN_GEN) build/gencfn-macros$(build_exeext) -c \
	$(RUN_GEN) build/gencfn-macros$(build_exeext) -o \
	$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h
#	$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h
#	$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h
#	$(RUN_GEN) build/gencheck$(build_exeext) > tmp-check.h
#	$(RUN_GEN) build/gencheck$(build_exeext) > tree-check.h
	$(RUN_GEN) build/genconditions$(build_exeext) $(md_file) > tmp-condmd.cc
	$(RUN_GEN) build/gencondmd$(build_exeext) > tmp-cond.md
	$(RUN_GEN) build/gengenrtl$(build_exeext) > tmp-genrtl.h
	$(RUN_GEN) build/gengtype$(build_exeext) $(GENGTYPE_FLAGS) \
	$(RUN_GEN) build/gengtype$(build_exeext) $(GENGTYPE_FLAGS) \
	$(RUN_GEN) build/genhooks$(build_exeext) "Common Target Hook" \
	$(RUN_GEN) build/genhooks$(build_exeext) "C Target Hook" \
	$(RUN_GEN) build/genhooks$(build_exeext) -d \
	$(RUN_GEN) build/genhooks$(build_exeext) "D Target Hook" \
	$(RUN_GEN) build/genhooks$(build_exeext) "Target Hook" \
	$(RUN_GEN) build/genmatch$(build_exeext) --generic $(srcdir)/match.pd \
	$(RUN_GEN) build/genmatch$(build_exeext) --gimple $(srcdir)/match.pd \
	$(RUN_GEN) build/genmddeps$(build_exeext) $(md_file) > tmp-mddeps
	$(RUN_GEN) build/genmddump$(build_exeext) $(md_file) > tmp-mddump.md
	$(RUN_GEN) build/genmodes$(build_exeext) -h > tmp-modes.h
	$(RUN_GEN) build/genmodes$(build_exeext) -i > tmp-modes-inline.h
	$(RUN_GEN) build/genmodes$(build_exeext) -m > tmp-min-modes.cc
	$(RUN_GEN) build/genmodes$(build_exeext) > tmp-modes.cc
	$(RUN_GEN) build/genopinit$(build_exeext) $(md_file) \
	$(RUN_GEN) build/genpreds$(build_exeext) $(md_file) > tmp-preds.cc
	$(RUN_GEN) build/genpreds$(build_exeext) -c $(md_file) > tmp-constrs.h
	$(RUN_GEN) build/genpreds$(build_exeext) -h $(md_file) > tmp-preds.h
	$(RUNTEST) --tool $* $(RUNTESTFLAGS))
	  $(RUNTEST) --tool $(check_p_tool) $(RUNTESTFLAGS); \
	  $(SHELL) $${srcdir}/../move-if-change tmp-site.exp site.exp; \
	$(SHELL) $${srcdir}/../move-if-change tmp-site.exp site.exp; \
	  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh $$sums \
	  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh -L $$logs \
	$(SHELL) $(srcdir)/doc/install.texi2html
	  $(SHELL) $(srcdir)/genmultilib '' '' '' '' '' '' '' '' \
	  $(SHELL) $(srcdir)/genmultilib \
	$(SHELL) $(srcdir)/mkconfig.sh bconfig.h
	$(SHELL) $(srcdir)/mkconfig.sh config.h
	$(SHELL) $(srcdir)/mkconfig.sh tconfig.h
	$(SHELL) $(srcdir)/mkconfig.sh tm_d.h
	$(SHELL) $(srcdir)/mkconfig.sh tm.h
	$(SHELL) $(srcdir)/mkconfig.sh tm_p.h
	  $(SHELL) $(srcdir)/../move-if-change \
	$(SHELL) $(srcdir)/../move-if-change tmp-$*.c insn-$*.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-$*.h insn-$*.h
	$(SHELL) $(srcdir)/../move-if-change tmp-all-tree.def all-tree.def
	$(SHELL) $(srcdir)/../move-if-change tmp-attrtab.c    insn-attrtab.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-case-cfn-macros.h \
	$(SHELL) $(srcdir)/../move-if-change tmp-cfn-operators.pd \
	$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h
#	$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h
#	$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h
#	$(SHELL) $(srcdir)/../move-if-change tmp-check.h tree-check.h
	$(SHELL) $(srcdir)/../move-if-change tmp-common-target-hooks-def.h \
	$(SHELL) $(srcdir)/../move-if-change tmp-condmd.c build/gencondmd.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-cond.md insn-conditions.md
	$(SHELL) $(srcdir)/../move-if-change tmp-constrs.h tm-constrs.h
	$(SHELL) $(srcdir)/../move-if-change tmp-c-target-hooks-def.h \
	$(SHELL) $(srcdir)/../move-if-change tmp-dfatab.c     insn-dfatab.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-d-target-hooks-def.h \
	$(SHELL) $(srcdir)/../move-if-change tmp-fixinc_list fixinc_list
	$(SHELL) $(srcdir)/../move-if-change tmp-generic-match.c \
	$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.h genrtl.h
	$(SHELL) $(srcdir)/../move-if-change tmp-gi.list gtyp-input.list
	$(SHELL) $(srcdir)/../move-if-change tmp-gimple-match.c \
	$(SHELL) $(srcdir)/../move-if-change tmp-gtype.state gtype.state
	$(SHELL) $(srcdir)/../move-if-change tmp-header-vars b-header-vars
	$(SHELL) $(srcdir)/../move-if-change tmp-latencytab.c insn-latencytab.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-macro_list macro_list
	$(SHELL) $(srcdir)/../move-if-change tmp-mddeps mddeps.mk
	$(SHELL) $(srcdir)/../move-if-change tmp-min-modes.c min-insn-modes.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-mlib.h multilib.h
	$(SHELL) $(srcdir)/../move-if-change tmp-modes.c insn-modes.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-modes.h insn-modes.h
	$(SHELL) $(srcdir)/../move-if-change tmp-modes-inline.h \
	$(SHELL) $(srcdir)/../move-if-change tmp-omp-device-properties.h \
	$(SHELL) $(srcdir)/../move-if-change tmp-opinit.c insn-opinit.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-opinit.h insn-opinit.h
	$(SHELL) $(srcdir)/../move-if-change tmp-optionlist optionlist
	$(SHELL) $(srcdir)/../move-if-change tmp-options.h options.h
	$(SHELL) $(srcdir)/../move-if-change tmp-preds.c insn-preds.cc
	$(SHELL) $(srcdir)/../move-if-change tmp-preds.h tm-preds.h
	$(SHELL) $(srcdir)/../move-if-change tmp-specs.h specs.h
	$(SHELL) $(srcdir)/../move-if-change tmp-target-hooks-def.h \
	$(SHELL) $(srcdir)/../move-if-change tmp-tm.texi tm.texi
	$(SHELL) $(srcdir)/../move-if-change tmp-version.h version.h
  $(shell echo $(BASEVER_c) | sed -e 's/^[0-9]*\.[0-9]*\.\([0-9]*\)$$/\1/')
  $(shell echo "$(exec_prefix)" | \
	    $(shell echo $(patsubst $(srcdir)/%,gt-%, \
	  $(shell echo "$(wordlist $(range), \
			  $(shell expr $(range) + $(write_entries_to_file_split) - 1), $(1))" \
	      $(SHELL) ./fixinc.sh "$${gcc_dir}/$${fix_dir}" \
	  $(shell i=1; while test $$i -le $(words $(1)); do \
$(simple_generated_c:insn-%.c=s-%): s-%: $(MD_DEPS)
$(simple_generated_c:insn-%.c=s-%): s-%: build/gen%$(build_exeext)
$(simple_generated_c): insn-%.c: s-%; @true
$(simple_generated_h:insn-%.h=s-%) \
$(simple_generated_h:insn-%.h=s-%): s-%: build/gen%$(build_exeext)
$(simple_generated_h): insn-%.h: s-%; @true
       $(simple_generated_h) specs.h \
$(simple_rtl_generated_c:insn-%.c=s-%): s-%: insn-conditions.md
$(simple_rtl_generated_h:insn-%.h=s-%) \
 $(SPECS) collect2$(exeext) gcc-ar$(exeext) gcc-nm$(exeext) \
$(SPECS): xgcc$(exeext)
	$(SPLAY_TREE_H) $(CPPLIB_H) $(GGC_H) $(DIAGNOSTIC_CORE_H)
	$(srcdir)/acinclude.m4
$(srcdir)/aclocal.m4 : @MAINT@ $(aclocal_deps)
  $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \
  $(srcdir)/asan.c \
	  | "$(srcdir)"/c-family/* | "$(srcdir)"/*.def ) \
  $(srcdir)/cgraphclones.c \
	  "$(srcdir)"/config/* | "$(srcdir)"/common/config/* \
	$(srcdir)/../config/acx.m4 \
	$(srcdir)/../config/codeset.m4 \
	$(srcdir)/../config/depstand.m4 \
	$(srcdir)/../config/dfp.m4 \
	$(srcdir)/../config/gcc-plugin.m4 \
	$(srcdir)/../config/gettext-sister.m4 \
	$(srcdir)/../config/iconv.m4 \
	$(srcdir)/../config/lcmessage.m4 \
	$(srcdir)/../config/lead-dot.m4 \
	$(srcdir)/../config/lib-ld.m4 \
	$(srcdir)/../config/lib-link.m4 \
	$(srcdir)/../config/lib-prefix.m4 \
	$(srcdir)/../config/mmap.m4 \
	$(srcdir)/../config/override.m4 \
	$(srcdir)/../config/picflag.m4 \
	$(srcdir)/../config/progtest.m4 \
        $(srcdir)/../config/stdint.m4 \
$(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac $(srcdir)/aclocal.m4
	$(srcdir)/../config/warnings.m4 \
	$(srcdir)/../config/zlib.m4 \
  $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/ipa-ref.h $(srcdir)/cgraph.h \
	 $(srcdir)/doc/tm.texi hostconfig.texi fragments.texi	\
			$(srcdir)/doc/tm.texi.in > tmp-tm.texi
$(srcdir)/doc/tm.texi: s-tm-texi; @true
  $(srcdir)/dojump.c $(srcdir)/emit-rtl.h \
  $(srcdir)/dwarf2asm.c \
  $(srcdir)/dwarf2cfi.c \
  $(srcdir)/dwarf2out.c \
  $(srcdir)/dwarf2out.h \
  $(srcdir)/emit-rtl.c $(srcdir)/except.h $(srcdir)/explow.c $(srcdir)/expr.c \
  $(srcdir)/expr.h \
  $(srcdir)/fixed-value.h \
  $(srcdir)/function.c $(srcdir)/except.c \
  $(srcdir)/gcse.c $(srcdir)/godump.c \
		    $(srcdir)/gen-pass-instances.awk
  $(srcdir)/gimple.h \
  $(srcdir)/gimple-ssa.h \
	 $(srcdir)/ginclude/iso646.h \
	 $(srcdir)/ginclude/stdalign.h \
	 $(srcdir)/ginclude/stdarg.h \
	 $(srcdir)/ginclude/stdatomic.h \
	 $(srcdir)/ginclude/stdbool.h \
	 $(srcdir)/ginclude/stddef.h \
	 $(srcdir)/ginclude/stdfix.h \
	 $(srcdir)/ginclude/stdnoreturn.h \
	 $(srcdir)/ginclude/varargs.h \
  $(srcdir)/hsa.c \
	$(srcdir)/../include/safe-ctype.h $(srcdir)/../include/filenames.h
  $(srcdir)/internal-fn.h \
  $(srcdir)/ipa-devirt.c \
  $(srcdir)/ipa-inline.h \
  $(srcdir)/ipa-modref.h $(srcdir)/ipa-modref.c \
  $(srcdir)/ipa-modref-tree.h \
  $(srcdir)/ipa-param-manipulation.h $(srcdir)/ipa-sra.c \
  $(srcdir)/ipa-prop.c $(srcdir)/ipa-cp.c $(srcdir)/ipa-utils.h \
  $(srcdir)/ipa-prop.h \
	$(srcdir)/../libcpp/include/cpplib.h
  $(srcdir)/libfuncs.h $(SYMTAB_H) \
  $(srcdir)/../libgcc/libgcov-driver.c $(srcdir)/../libgcc/libgcov-driver-system.c \
  $(srcdir)/../libgcc/libgcov-merge.c $(srcdir)/../libgcc/libgcov.h \
	$(srcdir)/../libtool.m4 \
  $(srcdir)/lists.c $(srcdir)/optabs-libfuncs.c \
	$(srcdir)/../lt~obsolete.m4 \
	$(srcdir)/../ltoptions.m4 \
  $(srcdir)/lto-streamer.h \
	$(srcdir)/../ltsugar.m4 \
	$(srcdir)/../ltversion.m4 \
	&& $(srcdir)/../move-if-change checksum-options.tmp checksum-options
  $(srcdir)/omp-low.c \
  $(srcdir)/omp-low.h \
  $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/tree-core.h \
    $(srcdir)/optc-gen.awk
    $(srcdir)/optc-save-gen.awk
    $(srcdir)/opth-gen.awk
  $(srcdir)/output.h $(srcdir)/cfgloop.h $(srcdir)/cfg.h \
	  $(srcdir)/passes.def $(PASSES_EXTRA) > pass-instances.def
  $(srcdir)/profile.c $(srcdir)/mcf.c \
  $(srcdir)/real.h $(srcdir)/function.h $(srcdir)/insn-addr.h $(srcdir)/hwint.h \
  $(srcdir)/reg-stack.c $(srcdir)/cfgrtl.c \
  $(srcdir)/reload.h $(srcdir)/caller-save.c $(srcdir)/symtab.c \
  $(srcdir)/sancov.c \
  $(srcdir)/sanopt.c \
  $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \
  $(srcdir)/signop.h \
  $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \
  $(srcdir)/target-globals.h \
  $(srcdir)/targhooks.c $(out_file) $(srcdir)/passes.c $(srcdir)/cgraphunit.c \
  $(srcdir)/trans-mem.c \
  $(srcdir)/tree-cfg.c $(srcdir)/tree-ssa-loop-ivopts.c \
  $(srcdir)/tree-chrec.h \
  $(srcdir)/tree-dfa.c \
  $(srcdir)/tree-iterator.c $(srcdir)/gimple-expr.c \
  $(srcdir)/tree-phinodes.c \
  $(srcdir)/tree-profile.c $(srcdir)/tree-nested.c \
  $(srcdir)/tree-scalar-evolution.c \
  $(srcdir)/tree-ssa-alias.h \
  $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \
  $(srcdir)/tree-ssanames.h \
  $(srcdir)/tree-ssa-operands.h \
  $(srcdir)/tree-vect-generic.c \
  $(srcdir)/tree-vrp.h \
  $(srcdir)/tsan.c \
  $(srcdir)/ubsan.c \
  $(srcdir)/value-range.h \
  $(srcdir)/value-range-storage.h \
  $(srcdir)/vtable-verify.c \
  $(srcdir)/wide-int.h $(srcdir)/alias.h $(srcdir)/coverage.c $(srcdir)/rtl.h \
	  $(STAMP) $@; \
	$(STAMP) $@
	$(STAMP) $@
	$(STAMP) $@
	$(STAMP) $@
	$(STAMP) $@
	$(STAMP) $@
	$(STAMP) $@
	$(STAMP) $@
	$(STAMP) $@
	    $(STAMP) include/$$realfile; \
	$(STAMP) s-$*
	$(STAMP) s-$*
	$(STAMP) s-alltree
	$(STAMP) s-attrtab
	$(STAMP) s-bversion
	$(STAMP) s-case-cfn-macros
	$(STAMP) s-cfn-operators
	$(STAMP) s-check
#	$(STAMP) s-check
#	$(STAMP) s-check
	$(STAMP) s-common-target-hooks-def-h
	$(STAMP) s-conditions
	$(STAMP) s-condmd
	$(STAMP) s-constrs-h
	$(STAMP) s-c-target-hooks-def-h
	$(STAMP) s-d-target-hooks-def-h
	$(STAMP) s-fixinc_list
	$(STAMP) s-genrtl-h
	$(STAMP) s-gtype
	$(STAMP) s-gtyp-input
	$(STAMP) s-header-vars
	@$(STAMP) site.exp
	$(STAMP) s-macro_list
	$(STAMP) s-match
	$(STAMP) s-mddeps
	$(STAMP) s-mlib
	$(STAMP) s-modes
	$(STAMP) s-modes-h
	$(STAMP) s-modes-inline-h
	$(STAMP) s-modes-m
	$(STAMP) s-omp-device-properties-h
	$(STAMP) s-opinit
	$(STAMP) s-options
	$(STAMP) s-preds
	$(STAMP) s-preds-h
	$(STAMP) s-specs
	    $(STAMP) stamp-qmtest
	$(STAMP) s-target-hooks-def-h
	$(STAMP) stmp-fixinc
	$(STAMP) s-version
  $(SYSTEM_H)
  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(HASHTAB_H)		\
  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)
  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)
  $(SYSTEM_H) $(CORETYPES_H) $(GTM_H) errors.h $(READ_MD_H) $(GENSUPPORT_H)
	$(SYSTEM_H) $(CORETYPES_H) tree.def c-family/c-common.def	\
  $(SYSTEM_H) coretypes.h $(TM_H) $(CONFIG_H) version.h intl.h $(DIAGNOSTIC_H)
# $(target_noncanonical)-gcc-$(version), and also as gcc if native.
	    > $(TESTSUITEDIR)/$*/$*.log; \
	    > $(TESTSUITEDIR)/$*/$*.sum; \
$(TESTSUITEDIR)/site.exp: site.exp
	$(TEXI2DVI) -I . -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<
	$(TEXI2DVI) -I . -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<
	$(TEXI2HTML) -I $(abs_docdir) -I $(abs_docdir)/include -o $(@D) $<
	$(TEXI2PDF) -I . -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<
	$(TEXI2PDF) -I . -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<
	-$(TEXI2POD) $< > $@
	-$(TEXI2POD) $< > $@
	-$(TEXI2POD) $< > $@
	-$(TEXI2POD) $< > $@
	-$(TEXI2POD) -DBUGURL="$(BUGURL_TEXI)" $< > $@
  $(tm_file_list) $(HASHTAB_H) $(SPLAY_TREE_H) $(srcdir)/bitmap.h \
  $(tm_file_list) $(tm_include_list) $(tm_p_file_list) $(tm_p_include_list) \
	       < $< > tmp-options.h
  $(TREE_H) $(C_COMMON_H) $(HOOKS_H) common/common-targhooks.h
  $(unlibsubdir)/$(shell echo "$(libdir)" | \
  $(VALGRIND_DRIVER_DEFINES) \
	$(VEC_H) $(INPUT_H) $(MACHMODE_H)
	$(VEC_H) treestruct.def $(HASHTAB_H) \
  $(WARN_CXXFLAGS) @DEFS@
# $(write_entries_to_file_split) to accommodate systems with
		$(XGETTEXT) gcc $(srcdir)
  $(XREGEX_H)
	$(ZLIB) $(ZSTD_LIB)
# a $lang-parallel directory which tests will be run by which runtest instance.
# Abort if no system headers available, unless building a crosscompiler.
abs_docdir = @abs_srcdir@/doc
abs_srcdir = @abs_srcdir@
accel_dir_suffix = @accel_dir_suffix@
ACLOCAL = aclocal
ACLOCAL_AMFLAGS = -I ../config -I ..
aclocal_deps = \
# Actual name to use when installing a native compiler.
	"ADA_CFLAGS=$(ADA_CFLAGS)" \
# Additional directories of header files to run fixincludes on.
# add suffixes and rules of their own.
# Afterwards contrib/dg-extract-results.sh is used to merge the sum and log
ALIASING_FLAGS = @aliasing_flags@
	alias.o \
# A list of all the language-specific executables.
# all 10 combinations.  GNU make is required, as is a shell that expands
all: @ALL@
ALL_CFLAGS = $(T_CFLAGS) $(CFLAGS-$@) \
ALL_COMPILERFLAGS = $(ALL_CXXFLAGS)
ALL_CPPFLAGS = $(INCLUDES) $(CPPFLAGS)
all.cross: native gcc-cross$(exeext) cpp$(exeext) specs \
# all.cross, start.encap, rest.encap,
# "all.cross" to build a cross compiler.
ALL_CXXFLAGS = $(T_CFLAGS) $(CFLAGS-$@) $(CXXFLAGS) $(INTERNAL_CFLAGS) \
# all, doc, install, install-cross, install-cross-rest, install-strip,
  @all_gtfiles@
ALL_GTFILES_H := $(sort $(GTFILES_H) $(GTFILES_LANG_H))
ALL_HOST_BACKEND_OBJS = $(GCC_OBJS) $(OBJS) $(OBJS-libcommon) \
ALL_HOST_FRONTEND_OBJS = $(foreach v,$(CONFIG_LANGUAGES),$($(v)_OBJS))
ALL_HOST_OBJS = $(ALL_HOST_FRONTEND_OBJS) $(ALL_HOST_BACKEND_OBJS)
all.internal: start.encap rest.encap doc selftest
ALL_LINKERFLAGS = $(ALL_CXXFLAGS)
	alloc-pool.h $(TIMEVAR_H)
	alloc-pool.o \
ALL_OPT_FILES=$(lang_opt_files) $(extra_opt_files)
# All option source files
# Allow configure to check this and use "ln -s", "ln", or "cp" as appropriate.
# All these programs need to report errors.
# All these programs use the MD reader ($(BUILD_MD)).
# All these programs use the RTL reader ($(BUILD_RTL)).
# all-tree.def includes all the tree.def files.
all-tree.def: s-alltree; @true
# All warnings have to be shut off in stage1 if the compiler used then
#along with GCC; see the file COPYING3.  If not see
# Also create gcc-cross, so that install-common will install properly.
# Also use `install-collect2' to install collect2 when the config files don't.
	# alter explicitly, and arrange for fixincludes not to run next time
# alternations within braces.
# always unchanged. Make must be deceived into thinking that tree-check.h is
	analyzer/analysis-plan.o \
	analyzer/analyzer-language.o \
	analyzer/analyzer-logging.o \
	analyzer/analyzer.o \
	analyzer/analyzer-pass.o \
	analyzer/analyzer-selftests.o \
	analyzer/bar-chart.o \
	analyzer/bounds-checking.o \
	analyzer/call-details.o \
	analyzer/call-info.o \
	analyzer/call-string.o \
	analyzer/call-summary.o \
	analyzer/checker-event.o \
	analyzer/checker-path.o \
	analyzer/complexity.o \
	analyzer/constraint-manager.o \
	analyzer/diagnostic-manager.o \
	analyzer/engine.o \
	analyzer/feasible-graph.o \
	analyzer/function-set.o \
	analyzer/infinite-recursion.o \
	analyzer/kf-analyzer.o \
	analyzer/kf-lang-cp.o \
	analyzer/kf.o \
	analyzer/known-function-manager.o \
# Analyzer object files
ANALYZER_OBJS = \
	analyzer/pending-diagnostic.o \
	analyzer/program-point.o \
	analyzer/program-state.o \
	analyzer/region-model-asm.o \
	analyzer/region-model-manager.o \
	analyzer/region-model.o \
	analyzer/region-model-reachability.o \
	analyzer/region.o \
	analyzer/sm-fd.o \
	analyzer/sm-file.o \
	analyzer/sm-malloc.o \
	analyzer/sm.o \
	analyzer/sm-pattern-test.o \
	analyzer/sm-sensitive.o \
	analyzer/sm-signal.o \
	analyzer/sm-taint.o \
	analyzer/state-purge.o \
	analyzer/store.o \
	analyzer/supergraph.o \
	analyzer/svalue.o \
	analyzer/trimmed-graph.o \
	analyzer/varargs.o
# and adds these here.  We use double-colon rules for some of the hooks;
# and CC is `gcc'.  It is renamed to `gcc' when it is installed.
# and compile them.
# and only contain c-family extensions (see known_suffixes).
# and that can lose with GNU tar which always writes a full block.
# and that fails if you're not into it.
# and the system's installed libraries.
# And this tells it not to automatically pass command-line variables
# An explanation of the sed strings:
# ??? Another way to solve this might be to rely on linker scripts.  Then
#any later version.
# any system header is included.
# Any system libraries needed just for GNAT.
# apply to the back end and some front ends, which may be compiled
AR = @AR@
AR_CREATE_FOR_TARGET = $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) rc
# are split between multiple directories and we would rather use one implicit
# are typically not allowed to distribute.  The general idea is to:
AR_EXTRACT_FOR_TARGET = $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) x
AR_FLAGS_FOR_TARGET =
AR_FLAGS = rc
AR_FOR_TARGET := $(shell \
AR_LIBS = @COLLECT2_LIBS@
AR_OBJS = file-find.o
# as accelerator targets.
# as an argument to -fself-test.
	asan.o \
# A simple rule to build tree-check.h would be
	    -a srcdir=`cd ${srcdir}/testsuite && ${PWD_COMMAND}` && \
# assigned in Makefile and having _H at the end of the name.  "sed -n" proved
# as well.
# a target to build even if it is up-to-date.  So we must verify that
# at build time.
		-Atmp-attrtab.c -Dtmp-dfatab.c -Ltmp-latencytab.cc
	  A) tr -d '\015' < tmp-tm.texi > tmp2-tm.texi ;; \
AUTOCONF = autoconf
# autoconf inserts -DCROSS_DIRECTORY_STRUCTURE if we are building a
# autoconf sets SYSTEM_HEADER_DIR to one of the above.
auto-host.h: cstamp-h ; @true
	auto-inc-dec.o \
# automatically, except for `configure'.
	auto-profile.o \
	AWK=$(AWK) $(SHELL) $(srcdir)/po/exgettext \
AWK = @AWK@
BACKEND = libbackend.a main.o libcommon-target.a libcommon.a \
BACKENDLIBS = $(ISLLIBS) $(GMPLIBS) $(PLUGINLIBS) $(HOST_LIBS) \
BACKTRACE = $(srcdir)/../libbacktrace
BACKTRACEINC = -I$(BACKTRACE)
	  *) base=`basename $$path` ;; \
	    base=`echo "$$path" | sed -e "s|$$srcdirstrip/||"`;; \
BASEVER     := $(srcdir)/BASE-VER  # 4.x.y
BASEVER_c   := $(shell cat $(BASEVER))
BASEVER_s   := "\"$(BASEVER_c)\""
BASIC_BLOCK_H = basic-block.h $(PREDICT_H) $(VEC_H) $(FUNCTION_H) \
	bb-reorder.o \
BCONFIG_H = bconfig.h $(build_xm_file_list)
bconfig.h: cs-bconfig.h ; @true
# be called PWDCMD, otherwise the value set here is passed to make
# Because of CCACHE_HARDLINK, this will also update the timestamp in
# because that file is not part of GCC.
# behavior in this respect: gt-LANG-file.h for "file" anywhere within a LANG
# be rebuilt.
# be subject to -Werror:
# be used in language Make-lang.in makefile fragments to enable
# Beware that /dev/null is not available to mingw tools, so directly use
	"bindir=$(bindir)" \
bindir = @bindir@
# /bin/sh on some systems returns the status of the first tar,
	"BISON=$(BISON)" \
BISON = @BISON@
BISONFLAGS =
	"BISONFLAGS=$(BISONFLAGS)" \
BITMAP_H = bitmap.h $(HASHTAB_H) statistics.h
	bitmap.o \
# Both . and srcdir are used, in that order,
# broken is small.
	bt-load.o \
BUGURL_s    := "\"@REPORT_BUGS_TO@\""
BUGURL_TEXI := @REPORT_BUGS_TEXI@
# build after fixincl for the build machine, getting a cache hit,
# Build and host support libraries.
build=@build@
  BUILD_CFLAGS := $(filter-out -fkeep-inline-functions, $(BUILD_CFLAGS))
BUILD_CFLAGS= @BUILD_CFLAGS@ $(GENERATOR_CFLAGS) -DGENERATOR_FILE
BUILD_COMPILERFLAGS = $(BUILD_CXXFLAGS)
BUILD_CPPFLAGS= -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \
BUILD_CPPLIB = $(build_libobjdir)/libcpp/libcpp.a
BUILD_CPPLIB = $(CPPLIB) $(LIBIBERTY)
BUILD_CXXFLAGS = @BUILD_CXXFLAGS@ $(GENERATOR_CFLAGS) -DGENERATOR_FILE
BUILD_ERRORS = build/errors.o
build/errors.o : errors.c $(BCONFIG_H) $(SYSTEM_H) errors.h
	"build_exeext=$(build_exeext)" \
build_exeext = @build_exeext@
build_file_translate = @build_file_translate@
# Build fixed copies of system files.
build/genattr-common.o : genattr-common.c $(RTL_BASE_H) $(BCONFIG_H)	\
build/genattr.o : genattr.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genattrtab.o : genattrtab.c $(RTL_BASE_H) $(OBSTACK_H)		\
build/genautomata$(build_exeext) : BUILD_LIBS += -lm
build/genautomata.o : genautomata.c $(RTL_BASE_H) $(OBSTACK_H)		\
build/gencfn-macros$(build_exeext) : build/hash-table.o build/vec.o \
build/gencfn-macros.o : gencfn-macros.c $(BCONFIG_H) $(SYSTEM_H)	\
build/gencheck.o : gencheck.c all-tree.def $(BCONFIG_H) $(GTM_H)	\
build/genchecksum.o : genchecksum.c $(BCONFIG_H) $(SYSTEM_H) $(MD5_H)
build/gencodes.o : gencodes.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H)	\
build/gencondmd.c: s-conditions; @true
build/gencondmd.o : \
build/gencondmd.o : build/gencondmd.c $(BCONFIG_H) $(SYSTEM_H)		\
build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genconstants.o : genconstants.c $(BCONFIG_H) $(SYSTEM_H)		\
build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genenums.o : genenums.c $(BCONFIG_H) $(SYSTEM_H)			\
build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)		\
build/genflags.o : genflags.c $(RTL_BASE_H) $(OBSTACK_H) $(BCONFIG_H)	\
build/gengenrtl.o : gengenrtl.c $(BCONFIG_H) $(SYSTEM_H) rtl.def
build/gengtype$(build_exeext) : build/gengtype-lex.o build/gengtype-parse.o \
build/gengtype-lex.o: $(BCONFIG_H)
build/gengtype-lex.o-warn = -Wno-error
build/gengtype.o: $(BCONFIG_H)
build/gengtype-parse.o: $(BCONFIG_H)
build/gengtype-state.o: $(BCONFIG_H)
              build/gengtype-state.o build/errors.o
build/genhooks.o : genhooks.c $(TARGET_DEF) $(C_TARGET_DEF)		\
build/genmatch$(build_exeext) : $(BUILD_CPPLIB) \
build/genmatch$(build_exeext): BUILD_LIBDEPS += $(LIBINTL_DEP) $(LIBICONV_DEP)
build/genmatch$(build_exeext): BUILD_LIBS += $(LIBINTL) $(LIBICONV)
build/genmatch.o : genmatch.c $(BCONFIG_H) $(SYSTEM_H) \
build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)	\
build/genmddump.o : genmddump.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h		\
build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genoutput.o : genoutput.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genpeep.o : genpeep.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/genrecog$(build_exeext) : build/hash-table.o build/inchash.o
build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)	\
build/gensupport.o: gensupport.c $(BCONFIG_H) $(SYSTEM_H) 		\
build/gentarget-def.o : gentarget-def.c $(BCONFIG_H) $(SYSTEM_H)	\
build/genversion$(build_exeext): build/genversion.o
	build/genversion$(build_exeext) > tmp-version.h
build/genversion.o: genversion.c $(BCONFIG_H) $(SYSTEM_H) $(srcdir)/DATESTAMP
		build/genversion.o -o $@
  build/ggc-none.o build/sort.o
build/ggc-none.o : ggc-none.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) 	\
build/hash-table.o : hash-table.c $(BCONFIG_H) $(SYSTEM_H)		\
build_htmldir = $(objdir)/HTML/gcc-$(version)
build/inchash.o : inchash.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)	\
BUILD_INFO = @BUILD_INFO@
# building for mingw.
BUILD_LDFLAGS=@BUILD_LDFLAGS@
	@# Build libbackend.a as a thin archive if possible, as doing so
BUILD_LIBDEPS= $(BUILD_LIBIBERTY)
# Build libgcc.a.
BUILD_LIBIBERTY = $(build_libobjdir)/libiberty/$(LIBIBERTY_PICDIR)/libiberty.a
BUILD_LIBIBERTY = $(build_libobjdir)/libiberty/libiberty.a
build_libobjdir := $(toplevel_builddir)/$(build_libsubdir)
BUILD_LIBS = $(BUILD_LIBIBERTY)
build_libsubdir=@build_libsubdir@
BUILD_LINKERFLAGS = $(BUILD_CXXFLAGS)
BUILD_MD = build/read-md.o
build/min-insn-modes.o : min-insn-modes.c $(BCONFIG_H) $(SYSTEM_H)	\
build_objdir := $(toplevel_builddir)/$(build_subdir)
build/%.o :  # dependencies provided by explicit rule later
build-po: $(CATALOGS)
# "build-@POSUB@" and "install-@POSUB@" above, when NLS is disabled.
# build/po with a different extension.
	    build/print-rtl.o build/hash-table.o build/sort.o
build/print-rtl.o: print-rtl.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)	\
build/read-md.o: read-md.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)	\
build/read-rtl.o: read-rtl.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H)	\
BUILD_RTL = build/rtl.o build/read-rtl.o build/ggc-none.o \
build/rtl.o: rtl.c $(BCONFIG_H) $(CORETYPES_H) $(GTM_H) $(SYSTEM_H)	\
build/sort.o : sort.c $(BCONFIG_H) $(SYSTEM_H)
build_subdir=@build_subdir@
BUILD_SYSTEM_HEADER_DIR = `echo @BUILD_SYSTEM_HEADER_DIR@ | sed -e :a -e 's,[^/]*/\.\.\/,,' -e ta`
# Build the include directories.
# Build the include directories.  The stamp files are stmp-* rather than
	"build_tooldir=$(build_tooldir)" \
build_tooldir = $(exec_prefix)/$(target_noncanonical)
build-: ; @true
# Build up a list of multilib directories and corresponding sysroot
	    build/vec.o build/min-insn-modes.o build/gensupport.o \
build/vec.o : vec.c $(BCONFIG_H) $(SYSTEM_H) $(CORETYPES_H) $(VEC_H)	\
build-warn = $(STRICT_WARN)
build_xm_defines=@build_xm_defines@
build_xm_file_list=@build_xm_file_list@
build_xm_include_list=@build_xm_include_list@
BUILTINS_DEF = builtins.def sync-builtins.def omp-builtins.def \
	builtins.o \
# built-in suffix rule `.o:' to build fixincl out of fixincl.o.  You'd
# built with NLS disabled.  For stage2+ use the host library and
# built with texinfo if sphinx is not available.
# but touch the target file only when its contents actually change.
# but tree-check.h doesn't change every time gencheck changes. It would the
# but we don't want to rebuild the info files unless the contents of
#but WITHOUT ANY WARRANTY; without even the implied warranty of
bversion.h: s-bversion; @true
# by people who are interested in updating .po files.
	caller-save.o \
	calls.o \
# Cancel installation by deleting the installed files.
	  case $$path in \
# case both are empty.
	  case-cfn-macros.h
       case-cfn-macros.h \
 case-cfn-macros.h cfn-operators.pd \
case-cfn-macros.h: s-case-cfn-macros; @true
	case `echo X|tr X '\101'` in \
# case for ASCII.  We use \r for other encodings like EBCDIC.
	  cat $@ >> $@.tmp; \
	    cat $(srcdir)/limitx.h $(T_GLIMITS_H) $(srcdir)/limity.h > tmp-xlimits.h; \
	    cat $(T_GLIMITS_H) > tmp-xlimits.h; \
CATALOGS = $(patsubst %,po/%,@CATALOGS@)
            cat include/x_$$file >>include/$$file; \
	cats="$(CATALOGS)"; for cat in $$cats; do \
	@cat site.bak | sed \
	@cat ./site.tmp > site.exp
# causes back-end specific include files to be poisoned, in the hope that
# CCACHE_HARDLINK enabled, the compiler doesn't embed the current
# C can be supported this way too (leave for later).
CC = @CC@
CC_FOR_BUILD = @CC_FOR_BUILD@
# CC is set by configure.
	ccmp.o \
C_COMMON_H = c-family/c-common.h c-family/c-common.def $(TREE_H) \
C_COMMON_OBJS = c-family/c-common.o c-family/c-cppbuiltin.o c-family/c-dump.o \
	      cd $(build_objdir)/fixincludes && \
	      ( cd $(DESTDIR)$(bindir) && \
	    ( cd $(DESTDIR)$(bindir) && \
	    ( cd $(DESTDIR)$(bindir) && \
	(cd `${PWD_COMMAND}`/include ; \
	cd `${PWD_COMMAND}`/include ; \
	(cd `${PWD_COMMAND}`/include-fixed ; \
	(cd `${PWD_COMMAND}`/include-fixed ; \
	cd `${PWD_COMMAND}`/include-fixed ; \
	cd `${PWD_COMMAND}`/include-fixed ; \
	cd ${QMTEST_DIR} && ${QMTEST} gui -C context
	cd ${QMTEST_DIR} && ${QMTEST} run ${QMTESTRUNFLAGS} -C context \
	(cd $(srcdir);					\
	(cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS))
	(cd $(srcdir) && $(AUTOCONF))
	cd $(TESTSUITEDIR)/$*; \
	  cd $(TESTSUITEDIR)/$(check_p_subdir); \
	cd $(toplevel_builddir) && $(MAKE) all-target-libgcc
	  cd ../prev-gcc && \
	-cd testsuite && rm -f *.out *.gcov *$(coverageexts)
	-cd testsuite && rm -f x *.x *.x? *.exe *.rpo *.o *.s *.S *.cc
CET_HOST_FLAGS = @CET_HOST_FLAGS@
# c-family and .def files. All other files are flattened to a single directory.
  c-family/c-attribs.o c-family/c-warn.o c-family/c-spellcheck.o
	c-family/c-common.def $(lang_tree_files) $(MACHMODE_H) \
  c-family/c-format.o c-family/c-gimplify.o c-family/c-indentation.o \
  c-family/c-lex.o c-family/c-omp.o c-family/c-opts.o c-family/c-pch.o \
  c-family/c-ppoutput.o c-family/c-pragma.o c-family/c-pretty-print.o \
	  c-family/cppspec.o $(EXTRA_GCC_OBJS) libcommon-target.a \
  c-family/c-semantics.o c-family/c-ada-spec.o \
					     c-family/c-target-hooks-def.h
       c-family/c-target-hooks-def.h d/d-target-hooks-def.h \
c-family/c-target-hooks-def.h: s-c-target-hooks-def-h; @true
  c-family/c-ubsan.o c-family/known-headers.o \
c-family-warn = $(STRICT_WARN)
	cfganal.o \
	cfgbuild.o \
	cfgcleanup.o \
  cfgexpand.h diagnostic-color.h gcc-symtab.h gimple-builder.h gimple-low.h \
	cfgexpand.o \
	cfg-flags.def cfghooks.h
	cfghooks.o \
	cfgloopanal.o \
CFGLOOP_H = cfgloop.h $(BASIC_BLOCK_H) double-int.h \
	cfgloopmanip.o \
	cfgloop.o \
	cfg.o \
	cfgrtl.o \
	"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)" \
CFLAGS-analyzer/engine.o += $(ZLIBINC)
CFLAGS-build/genversion.o += -DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \
CFLAGS-c-family/c-opts.o += @TARGET_SYSTEM_ROOT_DEFINE@
CFLAGS-c-family/c-pch.o += -DHOST_MACHINE=\"$(host)\" \
CFLAGS = @CFLAGS@
CFLAGS-collect2.o += -DTARGET_MACHINE=\"$(target_noncanonical)\" \
CFLAGS-cppbuiltin.o += $(PREPROCESSOR_DEFINES) -DBASEVER=$(BASEVER_s)
CFLAGS-cppdefault.o += $(PREPROCESSOR_DEFINES)
CFLAGS-errors.o += -DHOST_GENERATOR_FILE
CFLAGS-gcc-ar.o += $(DRIVER_DEFINES) \
CFLAGS-gcc-nm.o += $(DRIVER_DEFINES) \
CFLAGS-gcc.o += $(DRIVER_DEFINES) -DBASEVER=$(BASEVER_s)
CFLAGS-gcc-ranlib.o += $(DRIVER_DEFINES) \
CFLAGS-gcov.o += $(ZLIBINC)
CFLAGS-gengtype-lex.o += -DHOST_GENERATOR_FILE
CFLAGS-gengtype.o += -DHOST_GENERATOR_FILE
CFLAGS-gengtype-parse.o += -DHOST_GENERATOR_FILE
CFLAGS-gengtype-state.o += -DHOST_GENERATOR_FILE
CFLAGS-intl.o += -DLOCALEDIR=\"$(localedir)\"
# CFLAGS is for the user to override to, e.g., do a cross build with -O2.
# CFLAGS is set even though it's empty to show we reserve the right to set it.
CFLAGS-lto-compress.o += $(ZLIBINC) $(ZSTD_INC)
CFLAGS-lto-streamer-in.o += -DTARGET_MACHINE=\"$(target_noncanonical)\"
CFLAGS-optinfo-emit-json.o += -DTARGET_NAME=\"$(target_noncanonical)\" $(ZLIBINC)
CFLAGS-prefix.o += -DPREFIX=\"$(prefix)\" -DBASEVER=$(BASEVER_s)
CFLAGS-toplev.o += -DTARGET_NAME=\"$(target_noncanonical)\"
CFLAGS-tree-diagnostic-client-data-hooks.o += -DTARGET_NAME=\"$(target_noncanonical)\"
	  cfn-operators.pd
       cfn-operators.pd omp-device-properties.h
cfn-operators.pd: s-cfn-operators; @true
	    -c gcc_database.GCCDatabase \
	  c/gccspec.o $(EXTRA_GCC_OBJS) libcommon-target.a \
	cgraphbuild.o \
	cgraphclones.o \
CGRAPH_H = cgraph.h $(VEC_H) $(TREE_H) $(BASIC_BLOCK_H) $(FUNCTION_H) \
	cgraph.o \
	cgraphunit.o \
# Character encoding conversion library.
check: $(CHECK_TARGETS)
# check-$lang target.  It doesn't make sense to try e.g. 128 goals for small
	    check_$*_parallelize= check-parallel-$*; \
# check if someone mistakenly only changed tm.texi.
	    check-parallel-$* \
# check-parallel-$lang{,1,2,3,4,5} etc. goals invoke runtest with
# check-parallel-$lang{,1,2,3,4,5} etc. goals, which can be executed in
check-parallel-% : site.exp
check_p_count=$(check_$(check_p_tool)_parallelize)
check_p_numbers:=$(check_p_numbers0) $(check_p_numbers2) $(check_p_numbers4) $(check_p_numbers6)
check_p_numbers0:=1 2 3 4 5 6 7 8 9
check_p_numbers1:=0 $(check_p_numbers0)
check_p_numbers2:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers1)))
check_p_numbers3:=$(addprefix 0,$(check_p_numbers1)) $(check_p_numbers2)
check_p_numbers4:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers3)))
check_p_numbers5:=$(addprefix 0,$(check_p_numbers3)) $(check_p_numbers4)
check_p_numbers6:=$(foreach i,$(check_p_numbers0),$(addprefix $(i),$(check_p_numbers5)))
check_p_subdir=$(subst _,,$*)
check_p_subdirs=$(wordlist 1,$(check_p_count),$(wordlist 1, \
check_p_subno=$(word 2,$(subst _, ,$*))
check_p_tool=$(firstword $(subst _, ,$*))
check-subtargets: $(patsubst %,%-subtargets,$(CHECK_TARGETS))
checksum-options:
CHECK_TARGETS = @check_languages@
	  chmod a+r $${include_dir}/limits.h; \
	    chmod a+r include/$$file; \
	    chmod a+r include/$$file; \
	    chmod a+r include/$$realfile; \
	  chmod a+r include-fixed/README; \
	  chmod a+r include/stdint-gcc.h; \
	  chmod a+r include/stdint.h; \
	  chmod a+r include/stdint.h; \
	    chmod a+rx $${fix_dir} || true; \
	  chmod a+rx $${include_dir} || true; \
	-chmod a+rx $(DESTDIR)$(libsubdir)/include-fixed
	-chmod a+rx include-fixed
	-chmod a-x $@
	-chmod a-x $@
	-chmod a-x $@
	-chmod a-x $@
	-chmod a-x $@
	-chmod a-x $@
	-chmod a-x $@
	    chmod a-x $(DESTDIR)$(infodir)/$$realfile; \
	cif-code.def ipa-ref.h $(LINKER_PLUGIN_API_H) is-a.h
	cilk-common.o \
# `clean' deletes everything made by running `make all'.
clean: mostlyclean lang.clean
# cleared to say that no additional arguments beyond $(RUNTESTFLAGS)
C_LOOSE_WARN = @c_loose_warn@
# C_LOOSE_WARN is similar, but with C-only warnings.
  cnt=$$idx; \
.c.o .c.o:
CODYINC = -I$(srcdir)/../libcody
CODYLIB = ../libcody/libcody.a
collect2$(exeext): $(COLLECT2_OBJS) $(LIBDEPS)
COLLECT2 = @collect2@
COLLECT2_LIBS = @COLLECT2_LIBS@
COLLECT2_OBJS = collect2.o collect2-aix.o vec.o ggc-none.o \
  collect-utils.o file-find.o hash-table.o selftest.o
	combine.o \
	combine-stack-adj.o \
					     common/common-target-hooks-def.h
       common/common-target-hooks-def.h pass-instances.def \
common/common-target-hooks-def.h: s-common-target-hooks-def-h; @true
### Common flags to gengtype [e.g. -v or -B backupdir]
common_out_file=$(srcdir)/common/config/@common_out_file@
common_out_object_file=@common_out_object_file@
# Common prefix for installation directories.
COMMON_TARGET_DEF = common/common-target.def target-hooks-macros.h
COMMON_TARGET_H = common/common-target.h $(INPUT_H) $(COMMON_TARGET_DEF)
	compare-elim.o \
# compilation or not.
compilations: $(BACKEND)
COMPILE = $(COMPILE.base) -MT $@ -MMD -MP -MF $(@D)/$(DEPDIR)/$(*F).TPo
COMPILE.base = $(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) -o $@
# compile libgcc2.a.
COMPILER += $(CET_HOST_FLAGS)
COMPILER = $(CXX)
COMPILER += $(NO_PIE_CFLAGS)
# compiler and containing target-dependent code.
# Compiler and flags needed for plugin support
COMPILER_FLAGS = $(CXXFLAGS)
COMPILER_FOR_BUILD = $(CXX_FOR_BUILD)
# compiler proper (cc1, cc1obj, cc1plus).
COMPILERS = @all_compilers@
COMPILE = source='$<' object='$@' libtool=no \
# Compile the programs that generate insn-* from the machine description.
# Compiling object files from source files.
# Compute the list of GT header files from the corresponding C sources,
	CONFIG_FILES= \
	CONFIG_FILES=$@ $(SHELL) config.status
	 configfiles.texi collect2.texi headerdirs.texi funding.texi	\
# config.h/bconfig.h because AIX requires _LARGE_FILES to be defined before
CONFIG_H  = config.h  $(host_xm_file_list)
config.h: cs-config.h ; @true
	CONFIG_HEADERS= \
	CONFIG_HEADERS=auto-host.h:config.in \
CONFIG_LANGUAGES = @all_selected_languages@
	CONFIG_SHELL="$(SHELL)" \
config.status: $(srcdir)/configure $(srcdir)/config.gcc
# config.status does not exist before failing.
# configure sets "doc_build_sys" to "sphinx" or "texinfo" accordingly
# Consider the example of tree-check.h. It is constructed with build/gencheck.
# contains global variables that all the testsuites will use.
# contain the optimization flags, as you normally want code coverage
CONTEXT_H = context.h
	context.o \
	 contribute.texi compat.texi funding.texi gnu.texi gpl_v3.texi	\
	 contribute.texi makefile.texi configterms.texi options.texi	\
# Control whether header files are installed.
# Control whether Info documentation is built and installed.
# Control whether manpages generated by texi2pod.pl can be rebuilt.
# Control whether to run fixincludes.
	convert.o \
# Copy in the headers provided with gcc.
# Copyright (C) 1987-2022 Free Software Foundation, Inc.
# Copy the compiler files into directories where they will be run.
coverageexts = .{gcda,gcno}
COVERAGE_FLAGS = @coverage_flags@
	coverage.o \
	cp $^ $@
	cp $^ $@
	    cp $$file include; \
	  cp $(srcdir)/../fixincludes/README-fixinc include-fixed/README; \
	  cp $(srcdir)/ginclude/stdint-gcc.h include/stdint-gcc.h; \
	  cp $(srcdir)/ginclude/stdint-wrap.h include/stdint.h; \
	  cp $(srcdir)/gsyslimits.h $${include_dir}/syslimits.h; \
	  cp $(T_STDINT_GCC_H) include/stdint.h; \
	-cp -p $^ $(srcdir)
	-cp -p $^ $(srcdir)/doc
	-cp -p $^ $(srcdir)/doc
cpp$(exeext): $(GCC_OBJS) c-family/cppspec.o libcommon-target.a $(LIBDEPS) \
	-cp -p $(srcdir)/gsyslimits.h include/syslimits.h
	cppbuiltin.o \
cppbuiltin.o: $(BASEVER)
  cppdefault.h flags.h $(MD5_H) params.def params.h params-enum.h \
	cppdefault.o \
CPPFLAGS = @CPPFLAGS@
CPP_ID_DATA_H = $(CPPLIB_H) $(srcdir)/../libcpp/include/cpp-id-data.h
CPPINC = -I$(srcdir)/../libcpp/include
cpp_install_dir = @cpp_install_dir@
CPP_INSTALL_NAME := $(shell echo cpp|sed '$(program_transform_name)')
CPP_INTERNAL_H = $(srcdir)/../libcpp/internal.h $(CPP_ID_DATA_H)
# cpp is to cpp0 as e.g. g++ is to cc1plus: Just another driver.
CPPLIB_H = $(srcdir)/../libcpp/include/line-map.h \
CPPLIB = ../libcpp/libcpp.a
cpp.pod: cpp.texi cppenv.texi cppopts.texi
	cp -p -r include $(DESTDIR)$(libsubdir)
	cp -p -r include-fixed $(DESTDIR)$(libsubdir)
	cp -p -r include-fixed $(DESTDIR)$(libsubdir)
	  cp -p tmp-limits.h $${include_dir}/limits.h; \
C_PRAGMA_H = c-family/c-pragma.h $(CPPLIB_H)
C_PRETTY_PRINT_H = c-family/c-pretty-print.h $(PRETTY_PRINT_H) \
	cprop.o \
	cp xgcc$(exeext) gcc-cross$(exeext)
# Create or recreate the gcc private include file directory.
# Create or recreate the install-tools include file directory.
# Create the installation directories.
# Create the QMTest context file.
# Create the QMTest database configuration.
# cross compiler which does not use the native headers and libraries.
CROSS=@CROSS@
CROSS_SYSTEM_HEADER_DIR = @CROSS_SYSTEM_HEADER_DIR@
cs-bconfig.h: Makefile
cs-config.h: Makefile
CSCOPE=@CSCOPE@
	cselib.o \
	cse.o \
cstamp-h: config.in config.status
# cstamp-h.in controls rebuilding of config.in.
cs-tconfig.h: Makefile
cs-tm_d.h: Makefile
cs-tm.h: Makefile
cs-tm_p.h: Makefile
C_STRICT_WARN = @c_strict_warn@
# C_STRICT_WARN is similar, with C-only warnings.
CTAGS=@CTAGS@
C_TARGET_DEF = c-family/c-target.def target-hooks-macros.h
C_TARGET_DEF_H = c-family/c-target-def.h c-family/c-target-hooks-def.h \
C_TARGET_H = c-family/c-target.h $(C_TARGET_DEF)
C_TARGET_OBJS=@c_target_objs@
C_TREE_H = c/c-tree.h $(C_COMMON_H) $(DIAGNOSTIC_H)
# currently being compiled, in both source trees, to be examined as well.
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXX_FOR_BUILD = @CXX_FOR_BUILD@
CXX_TARGET_OBJS=@cxx_target_objs@
  -DACCEL_DIR_SUFFIX=\"$(accel_dir_suffix)\" \
	"datadir=$(datadir)" \
datadir = @datadir@
	"datarootdir=$(datarootdir)" \
datarootdir = @datarootdir@
	data-streamer-in.o \
	data-streamer.o \
	data-streamer-out.o \
# datastructures and routines with GTY markers.
DATESTAMP   := $(srcdir)/DATESTAMP # YYYYMMDD or empty
DATESTAMP_c := $(shell cat $(DATESTAMP))
DATESTAMP_s := \
	dbgcnt.o \
	-DBUGURL=$(BUGURL_s)
	dbxout.o \
	dce.o \
  -DCONFIGURE_SPECS="\"@CONFIGURE_SPECS@\"" \
  -DCROSS_INCLUDE_DIR=\"$(CROSS_SYSTEM_HEADER_DIR)\" \
  -DDEFAULT_REAL_TARGET_MACHINE=\"$(real_target_noncanonical)\" \
  -DDEFAULT_TARGET_MACHINE=\"$(target_noncanonical)\" \
  -DDEFAULT_TARGET_VERSION=\"$(version)\" \
	-DDEVPHASE=$(DEVPHASE_s) -DPKGVERSION=$(PKGVERSION_s) \
	ddg.o \
					     d/d-target-hooks-def.h
d/d-target-hooks-def.h: s-d-target-hooks-def-h; @true
	debug.o \
DECNUM = $(srcdir)/../libdecnumber
DECNUMFMT = $(srcdir)/../libdecnumber/$(enable_decimal_float)
DECNUMINC = -I$(DECNUM) -I$(DECNUMFMT) -I../libdecnumber
default-c.o: config/default-c.cc
# Default cross SYSTEM_HEADER_DIR, to be overridden by targets.
default-d.o: config/default-d.cc
# Default native SYSTEM_HEADER_DIR, to be overridden by targets.
# Default values for variables overridden in Makefile fragments.
# defined in this file into the environment (and thus recursive makes).
# Defined vpaths
# dejaGNU procedure is overridden to additionally synchronize through
# Delete all files made by compilation
# Delete all files that users would normally create
# Delete build programs
# Delete core dumps.
# Delete debugging dump files.
# Delete file generated for gengtype
# Delete files generated by gengtype
# Delete files used by the "multilib" facility (including libgcc subdirs).
# Delete genchecksum outputs
# delete it.  A stamp file is needed as autoheader won't update the file if
# Delete lock-and-run bits
# Delete other built files.
# Delete po/*.gmo only if we are not building in the source directory.
# Delete some files made during installation.
# Delete sorted indices we don't actually use.
# Delete the include directories.
# Delete the stamp and temporary files.
# Delete unwanted output files from TeX.
# Deletion of files made during compilation.
depcomp = $(SHELL) $(srcdir)/../depcomp
    DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) $(COMPILE.base)
DEPDIR = @DEPDIR@
# Dependencies for the md file.  The first time through, we just assume
# Dependencies on the intl and portability libraries.
# Dependency information.
# Dependency tracking stuff.
# Depend on this to specify a phony target portably.
DEPFILES = \
	  dest=$(plugin_includedir)/$$base; \
	DESTDIR=$(@D) \
	    dest=`ls -ld $(DESTDIR)$(libsubdir)/include-fixed/$$i | sed -n 's/.*-> //p'`; \
# development phase collapsed to the empty string in release mode
DEVNULL=$(if $(findstring mingw,$(build)),nul,/dev/null)
DEVPHASE    := $(srcdir)/DEV-PHASE # experimental, prerelease, ""
DEVPHASE_c  := $(shell cat $(DEVPHASE))
DEVPHASE_s  := "\"$(if $(DEVPHASE_c), ($(DEVPHASE_c)))\""
	df-core.o \
DF_H = df.h $(BITMAP_H) $(REGSET_H) sbitmap.h $(BASIC_BLOCK_H) \
  -DFIXED_INCLUDE_DIR=\"$(libsubdir)/include-fixed\" \
	dfp.o \
dfp.o-warn = -Wno-strict-aliasing
	df-problems.o \
	df-scan.o \
  -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
  -DGPLUSPLUS_BACKWARD_INCLUDE_DIR=\"$(gcc_gxx_include_dir)/backward\" \
  -DGPLUSPLUS_INCLUDE_DIR=\"$(gcc_gxx_include_dir)\" \
  -DGPLUSPLUS_INCLUDE_DIR_ADD_SYSROOT=$(gcc_gxx_include_dir_add_sysroot) \
  -DGPLUSPLUS_LIBCXX_INCLUDE_DIR=\"$(gcc_gxx_libcxx_include_dir)\" \
  -DGPLUSPLUS_LIBCXX_INCLUDE_DIR_ADD_SYSROOT=$(gcc_gxx_libcxx_include_dir_add_sysroot) \
  -DGPLUSPLUS_TOOL_INCLUDE_DIR=\"$(gcc_gxx_include_dir)/$(target_noncanonical)\" \
DIAGNOSTIC_CORE_H = diagnostic-core.h $(INPUT_H) bversion.h diagnostic.def
	diagnostic-format-json.o \
	diagnostic-format-sarif.o \
DIAGNOSTIC_H = diagnostic.h $(DIAGNOSTIC_CORE_H) $(PRETTY_PRINT_H)
	diagnostic-show-locus.o \
	  -DIN_GCOV_TOOL=1 -o $@ $<
	  -DIN_GCOV_TOOL=1 -o $@ $<
	  dir=$(localedir)/$$lang/LC_MESSAGES; \
	  dir=`cd include-fixed; ${PWD_COMMAND}`; \
	  dir=`dirname $$dest`; \
# Directories used during build
# Directory for prefix to system directories, for
# Directory in which all plugin resources are installed
# Directory in which GCC puts its executables.
 # Directory in which plugin headers are installed
# Directory in which plugin specific executables are installed
# Directory in which the compiler finds executables
# Directory in which the compiler finds libc++ includes.
# Directory in which the compiler finds libraries etc.
# Directory in which the compiler finds target-independent g++ includes.
# Directory in which to build HTML
# Directory in which to find other cross-compilation tools and headers.
# Directory in which to put DVIs
# Directory in which to put host dependent programs and libraries
# Directory in which to put HTML
# Directory in which to put localized header files. On the systems with
# Directory in which to put man pages.
# Directory in which to put the directories used by the compiler.
# Directory in which to put the executable for the command `gcc'
# Directory to link to, when using the target `maketest'.
# Directory to search for site-specific includes.
# Directory where sources are, absolute.
# Directory where sources are, from where we are.
# Directory where sources are, from where we are.
# Directory where sources are, relative to here.
# Dir for temp files.
DIR = ../gcc
# Disabled by autoconf if the tools are not available.
# --disable-maintainer-mode is used or not.  This is because the
# `distclean' also deletes the files made by config.
distclean: clean lang.distclean
  -DLOCAL_INCLUDE_DIR=\"$(local_includedir)\" \
  -DNATIVE_SYSTEM_HEADER_DIR=\"$(NATIVE_SYSTEM_HEADER_DIR)\"
  -DNATIVE_SYSTEM_HEADER_DIR=\"$(NATIVE_SYSTEM_HEADER_DIR)\" \
	  do \
doc: $(BUILD_INFO) $(GENERATED_MANPAGES)
doc/%.1: %.pod
doc/%.7: %.pod
doc_build_sys=@doc_build_sys@
doc/cpp.dvi: $(TEXI_CPP_FILES)
doc/cpp.info: $(TEXI_CPP_FILES)
           doc/cppinternals.dvi
doc/cppinternals.dvi: $(TEXI_CPPINT_FILES)
doc/cppinternals.info: $(TEXI_CPPINT_FILES)
           doc/cppinternals.pdf
doc/cppinternals.pdf: $(TEXI_CPPINT_FILES)
doc/cpp.pdf: $(TEXI_CPP_FILES)
docdir = @docdir@
doc/%.dvi: %.texi
           doc/fsf-funding.7 doc/gcov-tool.1 doc/gcov-dump.1 \
doc/gcc.dvi: $(TEXI_GCC_FILES)
doc/gcc.info: $(TEXI_GCC_FILES)
doc/gccinstall.dvi: $(TEXI_GCCINSTALL_FILES)
doc/gccinstall.info: $(TEXI_GCCINSTALL_FILES)
            doc/gccinstall.info doc/cppinternals.info
doc/gccinstall.pdf: $(TEXI_GCCINSTALL_FILES)
doc/gccint.dvi: $(TEXI_GCCINT_FILES)
doc/gccint.info: $(TEXI_GCCINT_FILES)
doc/gccint.pdf: $(TEXI_GCCINT_FILES)
doc/gcc.pdf: $(TEXI_GCC_FILES)
doc/%.info: %.texi
doc/%.pdf: %.texi
# doesn't use the insn-* convention.
	dojump.o \
DO_LINK_MUTEX = @DO_LINK_MUTEX@
DO_LINK_SERIALIZATION = @DO_LINK_SERIALIZATION@
dollar = @dollar@
	dominance.o \
	domwalk.o \
	  done; \
	  done; \
	  done; \
	  done; \
	  done; \
	  done; \
	  done; \
	done
	done
	done
	done
	done
	done
	done
	done
	done
	done
	done
	done
	done
	done;						\
	done; \
	done | sed 's|$(srcdir)/||' >> tmp-all-tree.def
	done | sed 's|$(srcdir)/||' > tmp-specs.h
# do not correctly set the timestamp due to buggy versions of `utime'
# *Do not* use this for directories that happen to contain
# Don't automatically run autoconf, since configure.ac might be accidentally
# Don't need to use LN_S here since we really do need ln -s and no substitutes.
# Don't run autoheader automatically either.
# Don't try modifying collect2 (aka ld) in place--it might be linking this.
# Don't use PWD since it is a common shell environment variable and we
# Don't use this as a dependency--use $(GCC_PASSES).
# don't want to corrupt it.
# double-colon rules should be preferred for any new hooks.
	double-int.h alias.h $(SYMTAB_H) $(FLAGS_H) \
	double-int.o \
  -DPREFIX=\"$(prefix)/\" \
	-DREVISION=$(REVISION_s) \
DRIVER_DEFINES = \
# driver, frontend, or selftest data change.
# driver program needs to select the library directory based on the
# driver slower, and because people who need it can recreate it by
	dse.o \
  -DSTANDARD_BINDIR_PREFIX=\"$(bindir)/\" \
  -DSTANDARD_EXEC_PREFIX=\"$(libdir)/gcc/\" \
  -DSTANDARD_EXEC_PREFIX=\"$(libdir)/gcc/\" \
  -DSTANDARD_LIBEXEC_PREFIX=\"$(libexecdir)/gcc/\" \
  -DSTANDARD_STARTFILE_PREFIX=\"$(unlibsubdir)/\" \
	-DTARGET_MACHINE=\"$(target)\"
	-DTARGET_MACHINE=\"$(target_noncanonical)\" \
	-DTARGET_MACHINE=\"$(target_noncanonical)\" \
	-DTARGET_MACHINE=\"$(target_noncanonical)\" \
D_TARGET_OBJS=@d_target_objs@
  -DTOOLDIR_BASE_PREFIX=\"$(libsubdir_to_prefix)$(prefix_to_exec_prefix)\" \
  -DTOOL_INCLUDE_DIR=\"$(gcc_tooldir)/include\" \
  -DTOOL_INCLUDE_DIR=\"$(gcc_tooldir)/include\" \
# Dummy rules to deal with dependencies produced by use of
# Dump a specs file to make -B./ read these specs over installed ones.
DUMPFILE_H = $(srcdir)/../libcpp/include/line-map.h dumpfile.h
	dumpfile.o \
dumpvers: dumpvers.cc
# Duplicate entry to handle renaming of gccinstall
# Duplicate entry to handle renaming of gccinstall.dvi
# Duplicate entry to handle renaming of gccinstall.info
# Duplicate entry to handle renaming of gccinstall.pdf
dvi:: $(DVIFILES) lang.dvi
dvidir = @dvidir@
DVIFILES = doc/gcc.dvi doc/gccint.dvi doc/gccinstall.dvi doc/cpp.dvi \
dvi__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
	dwarf2asm.o \
	dwarf2cfi.o \
	dwarf2out.o \
		-e '1,/^## All variables above are.*##/ d' >> site.exp
# Each language is linked in with a series of hooks.  The name of each
# each of $(system_prefix)/usr/include, $(system_prefix)/usr/lib, etc.
	  echo ";"; \
	     echo $$i; i=`expr $$i + $(write_entries_to_file_split)`; done), \
            echo $${rootme}/../expect/expect ; \
	    echo "$${sfx};$${multi_dir}"; \
	       echo $${srcdir}/../dejagnu/runtest ; \
	    echo "\"$$tgt\\0\"" >> tmp-omp-device-properties.h; \
      echo $(AR); \
	      echo "  ${BUILD_SYSTEM_HEADER_DIR}" >&2 ; \
	echo | $(GCC_FOR_TARGET) -E -dM - | \
	  echo $(INSTALL_DATA) $$cat $(DESTDIR)$$dir/gcc.mo; \
	  echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(dvidir)/gcc/$$f'"; \
	    echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(htmldir)/$$f'"; \
	    echo " $(INSTALL_DATA) '$$d$$p'/* '$(DESTDIR)$(htmldir)/$$f'"; \
	  echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(pdfdir)/gcc/$$f'"; \
	  echo $(INSTALL_DATA) $$path $(DESTDIR)$$dest; \
	echo "$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS)" > checksum-options.tmp \
	  echo $(mkinstalldirs) $(DESTDIR)$$dir; \
	    echo " $(mkinstalldirs) '$(DESTDIR)$(htmldir)/$$f'"; \
    echo $(objdir)/../binutils/ar ; \
    echo $(objdir)/../binutils/ranlib ; \
    echo $(objdir)/../binutils/strip-new ; \
      echo $(RANLIB); \
	  echo >&2 ; \
	  echo >&2 ; \
	@echo "# add them to the last section" >> ./site.tmp
	@echo "## All variables above are generated by configure. Do Not Edit ##" >> ./site.tmp
	  echo "append CFLAGS \" \$$newlib_cflags\"" >> ./site.tmp; \
	  echo "append CXXFLAGS \" \$$newlib_cflags\"" >> ./site.tmp; \
	  echo "append LDFLAGS \" \$$newlib_ldflags\"" >> ./site.tmp; \
	  echo "append LDFLAGS \" -L$(objdir)/../ld\"" >> ./site.tmp; \
	@echo check-$*
	echo "CompilerTable.c_kind=GCC" >> $@
	echo "CompilerTable.c_options=-B${objdir}/" >> $@
	echo "CompilerTable.c_path=${objdir}/xgcc" >> $@
	echo "CompilerTable.cplusplus_kind=GCC" >> $@
	echo "CompilerTable.cplusplus_options=-B${objdir}/" >> $@
	echo "CompilerTable.cplusplus_path=${objdir}/xg++" >> $@
	echo "CompilerTable.languages=c cplusplus" >> $@
	  echo 'const char omp_offload_device_'$${kind}'[] = ' \
	echo "#define BUILDING_GCC_MAJOR `echo $(BASEVER_c) | sed -e 's/^\([0-9]*\).*$$/\1/'`" > bversion.h
	echo "#define BUILDING_GCC_MINOR `echo $(BASEVER_c) | sed -e 's/^[0-9]*\.\([0-9]*\).*$$/\1/'`" >> bversion.h
	echo "#define BUILDING_GCC_PATCHLEVEL `echo $(BASEVER_c) | sed -e 's/^[0-9]*\.[0-9]*\.\([0-9]*\)$$/\1/'`" >> bversion.h
	echo "#define BUILDING_GCC_VERSION (BUILDING_GCC_MAJOR * 1000 + BUILDING_GCC_MINOR)" >> bversion.h
	echo "DejaGNUTest.target=${target_noncanonical}" >> $@
	@echo 'deletes files that may need special tools to rebuild.'
	@echo "# Do not edit here. If you wish to override these values" >> ./site.tmp
	  echo '#else'                     >> $@.tmp; \
	  echo '#endif'                    >> $@.tmp; \
	echo 'END_OF_BASE_TREE_CODES' >> tmp-all-tree.def
	echo GCC_CFLAGS = '$(GCC_CFLAGS)' >> tmp-libgcc.mvars
	  echo '#ifdef HOST_GENERATOR_FILE' > $@.tmp; \
	    echo "#include \"$$f\""; \
	  echo "#include \"$$f\""; \
	  echo '#include "bconfig.h"'      >> $@.tmp; \
	echo '#include "c-family/c-common.def"' >> tmp-all-tree.def
	  echo '#include "config.h"'       >> $@.tmp; \
	    echo "#include_next <$$file>" >>include/$$file; \
            echo "#include_next <$$file>" >include/$$file; \
	echo '#include "tree.def"' > tmp-all-tree.def
	echo INHIBIT_LIBC_CFLAGS = '$(INHIBIT_LIBC_CFLAGS)' >> tmp-libgcc.mvars
	@echo "Making a new config file..."
	  echo new text in $(objdir)/tm.texi, then copy it to $(srcdir)/doc/tm.texi. >&2 ; \
	echo NO_PIE_CFLAGS = "$$NO_PIE_CFLAGS" >> tmp-libgcc.mvars
	echo 'OTHER_FIXINCLUDES_DIRS="$(OTHER_FIXINCLUDES_DIRS)"' \
	echo rm -f $(@D)/*
	  echo "set ALT_CC_UNDER_TEST \"$(ALT_CC_UNDER_TEST)\"" >> ./site.tmp; \
	  echo "set ALT_CXX_UNDER_TEST \"$(ALT_CXX_UNDER_TEST)\"" >> ./site.tmp; \
	echo "@set BUGURL $(BUGURL_TEXI)" >> $@T; \
	@echo "set build_triplet $(build)" >> ./site.tmp
	@echo "set CFLAGS \"\"" >> ./site.tmp
	  echo "set COMPAT_OPTIONS \"$(COMPAT_OPTIONS)\"" >> ./site.tmp; \
	@echo "set CXXFLAGS \"\"" >> ./site.tmp
	  echo "set ENABLE_PLUGIN 1" >> ./site.tmp; \
	  echo "set GMPINC \"$(GMPINC)\"" >> ./site.tmp; \
	@echo "set HAVE_LIBSTDCXX_V3 1" >> ./site.tmp
	@echo "set HOSTCC \"$(CC)\"" >> ./site.tmp
	@echo "set HOSTCFLAGS \"$(CFLAGS)\"" >> ./site.tmp
	@echo "set HOSTCXX \"$(CXX)\"" >> ./site.tmp
	@echo "set HOSTCXXFLAGS \"$(CXXFLAGS)\"" >> ./site.tmp
	@echo "set host_triplet $(host)" >> ./site.tmp
	@echo "set libiconv \"$(LIBICONV)\"" >> ./site.tmp
	  echo "set newlib_cflags \"-I$(objdir)/../$(target_subdir)/newlib/targ-include -I\$$srcdir/../newlib/libc/include\"" >> ./site.tmp; \
	  echo "set newlib_ldflags \"-B$(objdir)/../$(target_subdir)/newlib/\"" >> ./site.tmp; \
	  echo "set PLUGINCC \"$(PLUGINCC)\"" >> ./site.tmp; \
	  echo "set PLUGINCFLAGS \"$(PLUGINCFLAGS)\"" >> ./site.tmp; \
	@echo "set rootme \"`${PWD_COMMAND}`\"" >> ./site.tmp
	@echo "set srcdir \"\$${srcdir}/testsuite\"" >> ./site.tmp
	@echo "set srcdir \"`cd ${srcdir}; ${PWD_COMMAND}`\"" >> ./site.tmp
	@echo "set target_alias $(target_noncanonical)" >> ./site.tmp
	@echo "set target_triplet $(target)" >> ./site.tmp
	@echo "set TEST_ALWAYS_FLAGS \"$(SYSROOT_CFLAGS_FOR_TARGET)\"" >> ./site.tmp
	@echo "set TEST_GCC_EXEC_PREFIX \"$(libdir)/gcc/\"" >> ./site.tmp
	@echo "set TESTING_IN_BUILD_TREE 1" >> ./site.tmp
	echo "set tmpdir $(objdir)/testsuite" >> ./site.tmp
	(echo "@set version-GCC $(BASEVER_c)"; \
	  echo "@set VERSION_PACKAGE $(PKGVERSION)" >> $@T; \
	echo 'STMP_FIXINC="$(STMP_FIXINC)"' \
      echo strip; \
		echo 'SYSTEM_HEADER_DIR="'"$(SYSTEM_HEADER_DIR)"'"' \
	echo TARGET_SYSTEM_ROOT = '$(TARGET_SYSTEM_ROOT)' >> tmp-libgcc.mvars
	      echo The directory that should contain system headers does not exist: >&2 ; \
	@echo "## these variables are automatically generated by make ##" > ./site.tmp
	@echo 'This command is intended for maintainers to use; it'
# "echo timestamp" is used instead of touch to be consistent with other
	  echo '"";' >> tmp-omp-device-properties.h; \
	  echo Verify that you have permission to grant a GFDL license for all >&2 ; \
	  echo You must configure gcc.  Look at http://gcc.gnu.org/install/ for details.; \
	  echo You should edit $(srcdir)/doc/tm.texi.in rather than $(srcdir)/doc/tm.texi . >&2 ; \
	edit-context.o \
# e.g. install-no-fixedincludes.
# either $(GCC_WARN_CXXFLAGS), or nothing.
	elif [ $(USE_GCC_STDINT) = provide ]; then \
	  elif [ -f $(srcdir)/$$cat ]; then cat=$(srcdir)/$$cat; \
	  elif [ -f $(srcdir)/$$file ]; then \
	elif test $(srcdir)/doc/tm.texi -nt $(srcdir)/doc/tm.texi.in \
	    else \
	    else \
	  else \
	  else \
	else \
	else \
	else \
	else \
	else \
	else \
	else \
	else \
    else \
    else \
    else \
  else
  else \
  else \
  else \
  else \
else
else
else
else
else
else
else
else
else
else
else
else
	  else continue; \
	  else continue; \
			else echo $(srcdir)/po/gcc.pot; fi` -o $@
	 else echo "@clear DEVELOPMENT"; \
          else echo expect ; fi`
	    else echo runtest; fi`
	else if [ "x$(MULTILIB_OPTIONS)" != x ] ; then \
	  else true; \
	else true; \
	else true; \
	else true; \
	else true; \
	else true; \
	  else true; fi; \
	  else true; fi; \
	  else true; fi; \
	else true; fi
	else true; fi
	else true; fi;
# else use the one in srcdir.
EMIT_RTL_H = emit-rtl.h
	emit-rtl.o \
enable_as_accelerator = @enable_as_accelerator@
enable_decimal_float = @enable_decimal_float@
enable_host_shared = @enable_host_shared@
# Enable Intel CET on Intel CET enabled host if needed.
enable_lto = @enable_lto@
enable_multiarch = @enable_multiarch@
	    "@enable_multilib@" \
enable_plugin = @enable_plugin@
# Enable target overriding of this fragment, as in config/t-vxworks.
  endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
# End of variables for you to override.
# Entry points `install', `install-strip', and `uninstall'.
  errors.h $(READ_MD_H)
#  -e 's|/$$||'          match a trailing forward slash and eliminates it
#  -e 's|^$(prefix)||'   matches and eliminates 'prefix' from 'exec_prefix'
	  esac; \
	esac
		 -e 's/^#define \(_[^_A-Z][a-zA-Z0-9_]*\).*/\1/p' | \
#  -e 's|^[^/]|/|'       forces the string to start with a forward slash (*)
        -e 's|/[^/]*|../|g')
#  -e 's|/[^/]*|../|g'   replaces each occurrence of /<directory> with ../
ETAGS=@ETAGS@
	et-forest.o \
# even if GCC is being compiled to run on some other machine.
# even if we are cross-building GCC.
# even if we are cross-building GCC.
EXCEPT_H = except.h $(HASHTAB_H)
	except.o \
	"exec_prefix=$(exec_prefix)" \
exec_prefix = @exec_prefix@
	"exeext=$(exeext)" \
exeext = @host_exeext@
	  EXPECT=${EXPECT} ; export EXPECT ; \
	EXPECT=${EXPECT} ; export EXPECT ; \
# expect fixincl to be newer than fixincl.o, such that this situation
EXPECT = `if [ -f $${rootme}/../expect/expect ] ; then \
	explow.o \
	expmed.o \
export AR_CREATE_FOR_TARGET
export AR_EXTRACT_FOR_TARGET
export AR_FLAGS_FOR_TARGET
export AR_FOR_TARGET
export AWK
export DESTDIR
export GCC_FOR_TARGET
	  export GCC_RUNTEST_PARALLELIZE_DIR ; \
export INCLUDES
export INSTALL_DATA
export libsubdir
export LIPO_FOR_TARGET
export MACHMODE_H
export NM_FOR_TARGET
export RANLIB_FOR_TARGET
export STRIP_FOR_TARGET
export STRIPPROG
	      export TARGET_MACHINE srcdir SHELL MACRO_LIST && \
	    export TCL_LIBRARY ; \
	    export TCL_LIBRARY ; fi ; \
EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)
	expr.o \
# Extension (if any) to put in installed man-page filename.
# "extern" tags in header files.
	     extract flags mddump opinit output peep preds recog target-def
# Extra flags to pass to indicate cross compilation, which
EXTRA_GCC_LIBS = @EXTRA_GCC_LIBS@
EXTRA_GCC_OBJS =@extra_gcc_objs@
EXTRA_GTYPE_DEPS=
EXTRA_HEADERS =@extra_headers_list@
# Extra include files that are defined by HeaderInclude directives in
# Extra include files that are defined by SourceInclude directives in
extra_modes_file=@extra_modes_file@
EXTRA_OBJS = @extra_objs@
extra_opt_files=@extra_opt_files@
EXTRA_PROGRAMS = @extra_programs@
	  f=$(dvi__strip_dir) \
	  f=$(html__strip_dir) \
	  f=$(pdf__strip_dir) \
	       -f $(srcdir)/optc-gen.awk \
	       -f $(srcdir)/optc-save-gen.awk \
	       -f $(srcdir)/opth-gen.awk \
	   && [ -f $(TESTSUITEDIR)/$(check_p_tool)-parallel/finished ]; then \
# fairly modern (POSIX-compliant) awk.
	  false; \
	  false; \
	  false; \
	 fdl.texi contrib.texi cppenv.texi cppopts.texi avr-mmcu.texi	\
	    fi ; \
	    fi; \
	    fi; \
	    fi; \
	    fi; \
	  fi ; \
	  fi ; \
	  fi;						\
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	  fi; \
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi
	fi )
	fi;
	fi; \
    fi; \
    fi; \
    fi; \
  fi)
  fi)
  fi)
  fi; \
	 fi) > $@T
	fi ; fi
# file name.
# file part, as we just want the file part of the stem, not the entire
	-files=`cd $(DESTDIR)$(libsubdir)/include-fixed; find . -type l -print 2>/dev/null`; \
# files.  If parallelization isn't desirable, only one recursive make
# files that have already been installed there will be found.  The -B option
# Files used by all variants of C and some other languages.
# Files used by all variants of C or by the stand-alone pre-processor.
# Files used by the D language front end.
	final.o \
	find . -print | cpio -pdum $(DESTDIR)$(libsubdir)/include
	find . -print | cpio -pdum $(DESTDIR)$(libsubdir)/include-fixed
	find . -print | cpio -pdum $(DESTDIR)$(libsubdir)/include-fixed
# First, parse all files and save a state file.
	fi > tmp-fixinc_list
	    fix_dir=include-fixed$${multi_dir}; \
#    fixed system ones,
FIXED_VALUE_H = fixed-value.h $(MACHMODE_H) double-int.h
	fixed-value.o \
fixinc_list: s-fixinc_list; @true
# FIXME: abort unless building --without-headers would be more accurate and less ugly
# FIXME: 'MAINT' will always be set to an empty string, no matter if
# Fix symlinks to absolute paths in the installed include directory to
	    flags=`echo $${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \
# flags from configure.  The user is free to explicitly turn these flags
FLAGS_H = flags.h flag-types.h $(OPTIONS_H)
# Flags to determine code coverage. When coverage is disabled, this will
FLAGS_TO_PASS = \
# Flags to pass to recursive makes.
	"FLEX=$(FLEX)" \
FLEXFLAGS =
	"FLEXFLAGS=$(FLEXFLAGS)" \
FLEX = @FLEX@
# flex output may yield harmless "no previous prototype" warnings
FNMATCH_H   = $(srcdir)/../include/fnmatch.h
	fold-const-call.o \
  fold-const.h fold-const-call.h tree-cfg.h tree-into-ssa.h tree-ssanames.h \
	fold-const.o \
# following will expand to "MAINT := " in maintainer mode, and to
#   /foo        /foo/bar          ../
#   /foo        /foo/bar/         ../
#   /foo/       /foo/bar          ../
#   /foo/       /foo/bar/         ../
#   /foo        /foo/bar/ugg      ../../
# for anything that is shared use the cc1plus profile data, as that
force:
	  for dir in $(TESTSUITEDIR)/$* \
# for each language, in case they weren't built or included
# For each of the files generated by running a generator program over
	for file in $$headers; do \
	for file in $(COMPILERS); do \
	for file in $(EXTRA_PROGRAMS) $(COLLECT2) ..; do \
	for file in .. $(USER_H); do \
	for file in .. $(USER_H_INC_NEXT_POST); do \
	for file in .. $(USER_H_INC_NEXT_PRE); do \
	  for f in $(<)*; do \
# For i18n support, we also need .gmo, .po, .pox.
	  for i in $$files; do \
	for i in ar nm ranlib ; do \
	  for i in gcc-ar gcc-nm gcc-ranlib; do \
	for kind in kind arch isa; do \
# For parallelized check-% targets, this decides whether parallelization
	  for prop in none $(omp_device_properties); do \
# For stage1 and when cross-compiling use the build libcpp which is
FORTRAN_TARGET_OBJS=@fortran_target_objs@
# For use in version.c - double quoted strings, with appropriate
# found in CDPATH, corrupting the output.  We could just redirect the
# from the install tree.
# from there (e.g. when running its testsuite).
# from within the *build* directory, for use when running the JIT library
# front-end checking.
	-fself-test=$(srcdir)/testsuite/selftests
fsf-funding.pod: funding.texi
FULL_DRIVER_NAME=$(target_noncanonical)-gcc-$(version)$(exeext)
FUNCTION_H = function.h $(HASHTAB_H) $(TM_H) hard-reg-set.h \
	function.o \
	fwprop.o \
	g++ -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $< $(OUTPUT_OPTION)
gcc-ar$(exeext): gcc-ar.o $(AR_OBJS) $(LIBDEPS)
	gcc-ar$(exeext) gcc-nm$(exeext) gcc-ranlib$(exeext)
# gcc as the native cc, `local_prefix' may not be `prefix' which is
GCC_CFLAGS=$(CFLAGS_FOR_TARGET) $(INTERNAL_CFLAGS) $(T_CFLAGS) $(LOOSE_WARN) $(C_LOOSE_WARN) -Wold-style-definition $($@-warn) -isystem ./include $(TCFLAGS)
	 gcc-common.texi gcc-vers.texi
	 gcc-common.texi gcc-vers.texi
gcc-cross$(exeext): xgcc$(exeext)
	      gcc_dir=`${PWD_COMMAND}` ; \
gcc_docdir = @srcdir@/doc
GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) ./xgcc -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include -isystem $(build_tooldir)/sys-include -L$(objdir)/../ld $(TFLAGS)
gcc_gxx_include_dir_add_sysroot = @gcc_gxx_include_dir_add_sysroot@
gcc_gxx_include_dir = @gcc_gxx_include_dir@
gcc_gxx_libcxx_include_dir_add_sysroot = @gcc_gxx_libcxx_include_dir_add_sysroot@
gcc_gxx_libcxx_include_dir = @gcc_gxx_libcxx_include_dir@
GCC_H = gcc.h version.h $(DIAGNOSTIC_CORE_H)
GCC_INSTALL_NAME := $(shell echo gcc|sed '$(program_transform_name)')
#GCC is distributed in the hope that it will be useful,
#GCC is free software; you can redistribute it and/or modify
gcc-nm$(exeext): gcc-nm.o $(AR_OBJS) $(LIBDEPS)
gcc-nm.c: gcc-ar.cc
gcc.o: $(BASEVER)
GCC_OBJS = gcc.o gcc-main.o ggc-none.o
GCC_PASSES=xgcc$(exeext) specs
GCC_PLUGIN_H = gcc-plugin.h highlev-plugin-common.h plugin.def \
gcc.pod: invoke.texi cppenv.texi cppopts.texi gcc-vers.texi
gcc.pot: po/gcc.pot
 gcc-ranlib$(exeext) \
gcc-ranlib$(exeext): gcc-ranlib.o $(AR_OBJS) $(LIBDEPS)
gcc-ranlib.c: gcc-ar.cc
	gcc-rich-location.o \
	  GCC_RUNTEST_PARALLELIZE_DIR=`${PWD_COMMAND}`/$(TESTSUITEDIR)/$(check_p_tool)-parallel ; \
# GCC_RUNTEST_PARALLELIZE_DIR var in the environment and runtest_file_p
gcc.srcextra: gengtype-lex.cc
# GCC's selftests.
GCC_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gcc|sed '$(program_transform_name)')
	"gcc_tooldir=$(gcc_tooldir)" \
gcc_tooldir = @gcc_tooldir@
gcc-vers.texi: $(BASEVER) $(DEVPHASE)
# gcc-vers.texi is generated from the version files.
GCC_WARN_CFLAGS = $(LOOSE_WARN) $(C_LOOSE_WARN) $($(@D)-warn) $(if $(filter-out $(STRICT_WARN),$($(@D)-warn)),,$(C_STRICT_WARN)) $(NOCOMMON_FLAG) $($@-warn)
GCC_WARN_CXXFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG) $($@-warn)
gcov$(exeext): $(GCOV_OBJS) $(LIBDEPS)
	    gcov-dump$(exeext) $(DESTDIR)$(bindir)/$(GCOV_DUMP_INSTALL_NAME)$(exeext); \
gcov-dump$(exeext): $(GCOV_DUMP_OBJS) $(LIBDEPS)
GCOV_DUMP_INSTALL_NAME := $(shell echo gcov-dump|sed '$(program_transform_name)')
GCOV_DUMP_OBJS = gcov-dump.o
GCOV_INSTALL_NAME := $(shell echo gcov|sed '$(program_transform_name)')
GCOV_IO_H = gcov-io.h gcov-iov.h auto-host.h gcov-counter.def
GCOV_OBJS = gcov.o json.o
# gcov.o needs $(ZLIBINC) added to the include flags.
	 gcov.texi trouble.texi bugreport.texi service.texi		\
 gcov-tool$(exeect) \
	    gcov-tool$(exeext) $(DESTDIR)$(bindir)/$(GCOV_TOOL_INSTALL_NAME)$(exeext); \
gcov-tool$(exeext): $(GCOV_TOOL_OBJS) $(LIBDEPS)
GCOV_TOOL_DEP_FILES = $(srcdir)/../libgcc/libgcov-util.c gcov-io.c $(GCOV_IO_H) \
GCOV_TOOL_INSTALL_NAME := $(shell echo gcov-tool|sed '$(program_transform_name)')
GCOV_TOOL_OBJS = gcov-tool.o libgcov-util.o libgcov-driver-tool.o libgcov-merge-tool.o
	gcse-common.o \
	gcse.o \
GDCFLAGS = @GDCFLAGS@
GDC = @GDC@
# genattrtab produces three files: tmp-{attrtab.c,dfatab.c,latencytab.c}
# gencheck doesn't read the machine description, and the file produced
# gencondmd doesn't use the standard naming convention.
generated_files = config.h tm.h $(TM_P_H) $(TM_D_H) $(TM_H) multilib.h \
GENERATED_MANPAGES = @GENERATED_MANPAGES@
generated-manpages: man
# Generated source files for gengtype.  Prepend inclusion of
# Generate header and source files from the machine description,
# generate the 'build fragment' b-header-vars
# generator program only if the machine description has changed,
	    					generic-match.cc
generic-match.c: s-match generic-match-head.c ; @true
	generic-match.o \
generic-match.o-warn = -Wno-unused
 gengtype$(exeext) *.[0-9][0-9].* *.[si] *-checksum.c libbackend.a \
gengtype$(exeext) : gengtype.o gengtype-lex.o gengtype-parse.o \
GENGTYPE_FLAGS= 
  gengtype.h errors.h version.h $(HASHTAB_H) $(OBSTACK_H) \
gengtype-lex.c : gengtype-lex.l
gengtype-lex.o build/gengtype-lex.o : gengtype-lex.c gengtype.h $(SYSTEM_H)
  gengtype-lex.o errors.o
gengtype-lex.o-warn = -Wno-error
GENGTYPE_OBJS = gengtype.o gengtype-parse.o gengtype-state.o \
gengtype.o build/gengtype.o : gengtype.c $(SYSTEM_H) gengtype.h 	\
gengtype-parse.o build/gengtype-parse.o : gengtype-parse.c gengtype.h \
gengtype-state.o build/gengtype-state.o: gengtype-state.c $(SYSTEM_H) \
              gengtype-state.o errors.o $(LIBDEPS)
# genopinit produces two files.
genprog = $(genprogerr) check checksum match
genprogerr = $(genprogmd) genrtl modes gtype hooks cfn-macros condmd
genprogmd = $(genprogrtl) mddeps constants enums
genprogrtl = attr attr-common attrtab automata codes conditions config emit \
 genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \
genrtl.h: s-genrtl-h; @true
GENSUPPORT_H = gensupport.h read-md.h optabs.def
 genversion$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \
# genversion.c is run on the build machine to generate version.h
# Get rid of every file that's generated from some other file, except for `configure'.
#  - Get to "install" with a bare set of internal headers, not the
gfdl.pod: fdl.texi
	ggc-common.o \
GGC_H = ggc.h gtype-desc.h statistics.h
GGC_LIB=
	ggc-page.o \
	gimple-builder.o \
	gimple-expr.o \
	gimple-fold.o \
GIMPLE_H = gimple.h gimple.def gsstruct.def $(VEC_H) \
  gimple.h is-a.h memmodel.h $(TREE_PASS_H) $(GCC_PLUGIN_H) \
	gimple-iterator.o \
	gimple-laddress.o \
	gimple-low.o \
	    					gimple-match.cc
       gimple-match.c generic-match.c \
gimple-match.c: s-match gimple-match-head.c ; @true
	gimple-match.o \
gimple-match.o-warn = -Wno-unused
	gimple.o \
GIMPLE_PRETTY_PRINT_H = gimple-pretty-print.h $(TREE_PRETTY_PRINT_H)
	gimple-pretty-print.o \
	gimple-ssa-backprop.o \
	gimple-ssa-isolate-paths.o \
	gimple-ssa-nonnull-compare.o \
	gimple-ssa-split-paths.o \
	gimple-ssa-strength-reduction.o \
	gimple-streamer-in.o \
	gimple-streamer-out.o \
  gimple-walk.h gimplify-me.h pass_manager.h print-rtl.h stmt.h \
	gimple-walk.o \
	gimplify-me.o \
	gimplify.o \
GMPINC = @GMPINC@
GMPLIBS = @GMPLIBS@
GMSGFMT = @GMSGFMT@
GNATBIND = @GNATBIND@
gnat_install_lib = @gnat_install_lib@
GNATMAKE = @GNATMAKE@
#GNU General Public License for more details.
	 gnu.texi gpl_v3.texi fdl.texi contrib.texi languages.texi	\
	g++ -o $@ paranoia.o real.o $(LIBIBERTY)
	godump.o \
gpl.pod: gpl_v3.texi
	graphds.o \
	graphite-dependences.o \
	graphite-isl-ast-to-gimple.o \
	graphite.o \
	graphite-optimize-isl.o \
	graphite-poly.o \
	graphite-scop-detection.o \
	graphite-sese-to-poly.o \
	graph.o \
GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \
GTFILES_H = $(subst /,-, \
GTFILES_LANG_H = $(patsubst [%], gtype-%.h, $(filter [%], $(GTFILES)))
	gtm-builtins.def sanitizer.def cilkplus.def cilk-builtins.def
# GTM_H lists the config files that the generator files depend on,
GTM_H     = tm.h      $(tm_file_list) insn-constants.h
	gtype-desc.o \
# gtype.state is correctly read:
gtyp-input.list: s-gtyp-input ; @true
	"gxx_include_dir=$(gcc_gxx_include_dir)" \
	"gxx_libcxx_include_dir=$(gcc_gxx_libcxx_include_dir)" \
	haifa-sched.o \
# Handle cpp installation.
  hash-set.h dominance.h cfg.h cfgrtl.h cfganal.h cfgbuild.h cfgcleanup.h \
HASHTAB_H   = $(srcdir)/../include/hashtab.h
HASH_TABLE_H = $(HASHTAB_H) hash-table.h $(GGC_H)
	hash-table.o file-find.o spellcheck.o selftest.o opt-suggestions.o
		hash-table.o ggc-none.o\
		hash-table.o ggc-none.o $(LIBS) $(ZLIB) -o $@
# have crt0's).  We could only add the -B if ../newlib/crt0.o exists, but that
# having an empty command (nothing following the semicolon).
	      *.h *.c *.c \
# Header dependencies for the programs that generate source code.
# header files, but are not searched automatically by default.
# Header files that are made available under the same name
	HEADERS="$(build_xm_include_list)" DEFINES="$(build_xm_defines)" \
	HEADERS="$(host_xm_include_list)" DEFINES="$(host_xm_defines)" \
	HEADERS="$(tm_d_include_list)" DEFINES="" \
	HEADERS="$(tm_include_list)" DEFINES="$(tm_defines)" \
	HEADERS="$(tm_p_include_list)" DEFINES="" \
	HEADERS="$(xm_include_list)" DEFINES="USED_FOR_TARGET $(xm_defines)" \
	headers=`echo $(sort $(PLUGIN_HEADERS)) $$(cd $(srcdir); echo *.h *.def) | tr ' ' '\012' | sort -u`; \
# hooked is "lang.${target_name}" (eg: lang.info).  Configure computes
HOOKS_H = hooks.h $(MACHMODE_H)
host_hook_obj=@out_host_hook_obj@
HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)
host=@host@
HOST_LIBS = @HOST_LIBS@
host_noncanonical=@host_noncanonical@
host_os=@host_os@
# host overrides
host_subdir=@host_subdir@
host_xm_defines=@host_xm_defines@
host_xm_file_list=@host_xm_file_list@
host_xm_include_list=@host_xm_include_list@
# How to compile object files to run on the build machine.
# How to find GMP
# How to find isl.
# How to handle <stdint.h>.
# How to link with both our special library facilities
	hsa-brig.o \
	hsa-dump.o \
	hsa-gen.o \
	hsa.o \
	hsa-regalloc.o \
html:: $(HTMLS_BUILD)
htmldir = @htmldir@
# html documentation.
HTMLS_BUILD=$(build_htmldir)/cpp/index.html $(build_htmldir)/gcc/index.html \
HTMLS_INSTALL=$(build_htmldir)/cpp $(build_htmldir)/gcc \
html__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
#<http://www.gnu.org/licenses/>.
	hw-doloop.o \
	hwint.o \
# -I$(@D) and -I$(srcdir)/$(@D) cause the subdirectory of the file
			-I $(gcc_docdir)/include -o $@ $<; \
			-I $(gcc_docdir)/include -o $@ $<; \
	   -I$(srcdir)/../include @INCINTL@ \
		-I$(srcdir)/../include @INCINTL@ $(CPPINC) $(CPPFLAGS)
  idx=0; cnt2=$(DO_LINK_SERIALIZATION); \
  idx=`expr $(1) + 1`; \
# (i.e. if DEVPHASE_c is empty and PATCHLEVEL_c is 0).  The space
	if [ $$? -eq 0 ]; then \
	    if [ "$${multi_dir}" = "." ]; \
	 if [ "$(DEVPHASE_c)" = "experimental" ]; \
	if $(GCC_FOR_TARGET) -print-sysroot-headers-suffix > /dev/null 2>&1; then \
	  if [ "$(GCC_INSTALL_NAME)" != "$(target_noncanonical)-gcc-$(version)" ]; then \
    if [ "$(host)" = "$(target)" ] ; then \
    if [ "$(host)" = "$(target)" ] ; then \
    if [ "$(host)" = "$(target)" ] ; then \
	    if ! $(inhibit_libc) && test ! -d ${BUILD_SYSTEM_HEADER_DIR}; then \
	  if $(LIMITS_H_TEST) ; then \
	-if $(SHELL) -c 'install-info --version' >/dev/null 2>&1; then \
	if [ $(USE_GCC_STDINT) = wrap ]; then \
# If a supplementary library is being used for the GC.
# If build/po/gcc.pot exists, use it (it was just created),
	@if cmp -s $(srcdir)/doc/tm.texi tm.texi; then \
	ifcvt.o \
	    if [ -d $$dir ]; then \
	@if [ -d $(objdir)/../$(target_subdir)/newlib ] \
	@if [ -d $(objdir)/../ld ] ; then \
ifdef REVISION_c
	-if [ -d include-fixed ] ; then true; else mkdir include-fixed; chmod a+rx include-fixed; fi
	-if [ -d include ] ; then true; else mkdir include; chmod a+rx include; fi
	if [ -d ../prev-gcc ]; then \
ifeq ($(AR_FLAGS),rc)
ifeq ($(build_objdir),$(build_libobjdir))
ifeq ($(CXXDEPMODE),depmode=gcc3)
ifeq ($(DO_LINK_SERIALIZATION),)
ifeq ($(enable_as_accelerator),yes)
ifeq ($(enable_host_shared),yes)
  ifeq ($(enable_multiarch),auto)
ifeq ($(enable_multiarch),yes)
ifeq ($(enable_plugin),yes)
ifeq ($(enable_plugin),yes)
ifeq ($(enable_plugin),yes)
ifeq ($(HOST_LIBS),)
ifeq ($(host_subdir),.)
ifeq ($(if $(wildcard ../stage_current),$(shell cat \
ifeq ($(inhibit_libc),true)
ifeq ($(RANLIB_FLAGS),)
ifeq ($(THIN_ARCHIVE_SUPPORT),yes)
ifeq ($(USE_THIN_ARCHIVES),yes)
ifeq (,$(wildcard $(REVISION)))
ifeq (@DO_LINK_MUTEX@,true)
ifeq (@enable_gcov@,yes)
	    if expr "$$dest" : "$$dir.*" > /dev/null; then \
	  if [ -f $$cat ]; then :; \
	  if [ -f $$file ] ; then \
	  if [ -f $$file ] ; then \
	  if [ -f $${rootme}/../expect/expect ] ; then  \
	if [ -f $${rootme}/../expect/expect ] ; then  \
  if [ -f $(objdir)/../binutils/ar ] ; then \
  if [ -f $(objdir)/../binutils/ranlib ] ; then \
  if [ -f $(objdir)/../binutils/strip-new ] ; then \
	  if [ -f $@ ]; then \
	if [ -f $< ]; then \
	@if [ ! -f config.status ] ; then \
	  if [ ! -f gcc-cross$(exeext) ] \
	  if [ -f gcov$(exeext) ]; \
	  if [ -f gcov-dump$(exeext) ]; \
	  if [ -f gcov-tool$(exeext) ]; \
	-if [ ! -f po/exgettext ]; then rm -f po/*.gmo; fi
# If HOST_LIBS is set, then the user is controlling the libraries to
    if_multiarch =
  if_multiarch = $(1)
    if_multiarch = $(if $(wildcard $(shell echo $(BUILD_SYSTEM_HEADER_DIR))/../../usr/lib/*/crti.o),$(1))
	  if [ -n "$$GCC_RUNTEST_PARALLELIZE_DIR" ] ; then \
	if [ -n "$(check_p_subno)" ] \
	@if [ -n "$(filter -j%, $(MFLAGS))" ]; then \
	if [ -n "$(PKGVERSION)" ]; then \
# If necessary (e.g., when using the MSYS shell on Microsoft Windows)
ifneq ($(STRIP),)
# If newlib has been configured, we need to pass -B to gcc so it can find
	-if test "$(enable_as_accelerator)" != "yes" ; then \
	-if test "$(enable_as_accelerator)" != "yes" ; then \
	-if test "$(enable_as_accelerator)" != "yes" ; then \
	-if test "$(enable_as_accelerator)" != "yes" ; then \
	-if test "$(enable_as_accelerator)" != "yes" ; then \
	if test "$(enable_as_accelerator)" != "yes" ; then \
	  if test -d "$$d$$p"; then \
	if test @enable_default_pie@ = yes; then \
	if test @enable_multilib@ = yes \
	@if test "@enable_plugin@" = "yes" ; then \
	  if test -f $$dir/TAGS; then			\
	  if test -f "$$p" || test -d "$$p"; then d=""; else d="$(srcdir)/"; fi; \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	    if test -f gcc-cross$(exeext); then \
	      if test "x${BUILD_SYSTEM_HEADER_DIR}" = "x$${tooldir_sysinc}"; \
	  if [ x"$$file" != x.. ]; then \
	  if [ X$$file != X.. ]; then \
	  if [ X$$file != X.. ]; then \
	  if [ X$$file != X.. ]; then \
	@if [ "X$(ALT_CC_UNDER_TEST)" != "X" ] ; then \
	@if [ "X$(ALT_CXX_UNDER_TEST)" != "X" ] ; then \
	if [ x$(BUILD_INFO) = xinfo ]; then \
	if [ x$(BUILD_INFO) = xinfo ]; then \
	@if [ "X$(COMPAT_OPTIONS)" != "X" ] ; then \
	  if [ x$(cpp_install_dir) != x ]; then \
	-if [ x$(cpp_install_dir) != x ]; then \
	-if [ "x$(MULTILIB_DIRNAMES)" != x ] ; then \
	if [ x$(STMP_FIXINC) != x ]; then \
# immediately after the comma in the $(if ...) constructs is
	 implement-c.texi implement-cxx.texi gcov-tool.texi gcov-dump.texi \
	inchash.o \
-include $(DEPFILES)
-include $(LANG_MAKEFRAGS)
-include $(tmake_file)
-include $(xmake_file)
includedir = $(prefix)/include
	  include_dir=include$${multi_dir}; \
	      ../include/*.h ../libiberty/*.c \
-include mddeps.mk
INCLUDES = -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \
# includes several files generated by those generators.
# Include the auto-generated dependencies for all host objects.
	incpath.o \
	incs= ;						\
	    incs="$$incs --include $$dir/TAGS.sub";	\
info: $(INFOFILES) lang.info @GENINSRC@ srcinfo lang.srcinfo
infodir = @infodir@
INFOFILES = doc/cpp.info doc/gcc.info doc/gccint.info \
# IN_GCC distinguishes between code compiled into GCC itself and other
INHIBIT_LIBC_CFLAGS = -Dinhibit_libc
inhibit_libc = @inhibit_libc@
	init-regs.o \
# In order for parallel make to really start compiling the expensive
# in particular on ia64-hpux where "s/.../p" only prints if -n was requested
INPUT_H = $(srcdir)/../libcpp/include/line-map.h input.h
INSN_ADDR_H = $(srcdir)/insn-addr.h
  insn-attr.h insn-attr-common.h insn-attrtab.c insn-dfatab.c \
 insn-attr.h insn-attr-common.h insn-attrtab.c insn-dfatab.c \
INSN_ATTR_H = insn-attr.h insn-attr-common.h $(INSN_ADDR_H)
insn-attrtab.c insn-dfatab.c insn-latencytab.c: s-attrtab ; @true
	insn-attrtab.o \
	insn-automata.o \
  insn-conditions.md
	  insn-conditions.md -htmp-opinit.h -ctmp-opinit.cc
insn-conditions.md: s-condmd; @true
			  insn-config.h insn-flags.h insn-target-def.h
	insn-dfatab.o \
  insn-emit.c insn-recog.c insn-extract.c insn-output.c insn-peep.c \
	insn-emit.o \
	insn-enums.o \
			  insn-extract.c insn-output.c \
	insn-extract.o \
 insn-latencytab.c insn-opinit.c insn-opinit.h insn-preds.c insn-constants.h \
  insn-latencytab.c insn-preds.c gimple-match.c generic-match.c \
	insn-latencytab.o \
insn-modes.c: s-modes; @true
insn-modes.h: s-modes-h; @true
	  insn-modes-inline.h
insn-modes-inline.h: s-modes-inline-h; @true
	insn-modes.o \
  insn-notes.def $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) \
insn-opinit.c insn-opinit.h: s-opinit ; @true
	insn-opinit.o \
 insn-output.c insn-recog.c insn-emit.c insn-extract.c insn-peep.c \
	insn-output.o \
			  insn-peep.c insn-recog.cc
	insn-peep.o \
insn-preds.c: s-preds; @true
	insn-preds.o \
	insn-recog.o \
  insn-target-def.h
	"INSTALL=$(INSTALL)" \
# Install all the header files built in the include subdirectory.
# Installation directories
install-collect2: collect2 installdirs
# install-common, install-info, install-man,
install-common: native lang.install-common installdirs
install-cpp: installdirs cpp$(exeext)
    install-cpp install-man install-info install-@POSUB@ \
	"INSTALL_DATA=$(INSTALL_DATA)" \
INSTALL_DATA = @INSTALL_DATA@
installdirs:
	# "install" doesn't trigger pointless rebuilds because of that update,
install-driver: installdirs xgcc$(exeext)
    install-driver install-lto-wrapper install-gcc-ar
install-dvi: $(DVIFILES) lang.install-dvi
install-gcc-ar: installdirs gcc-ar$(exeext) gcc-nm$(exeext) gcc-ranlib$(exeext)
install-gcc-tooldir:
# Install gcov-dump if it was compiled.
# Install gcov if it was compiled.
# Install gcov-tool if it was compiled.
# Install gengtype
install-gengtype: installdirs gengtype$(exeext) gtype.state
install-headers: $(INSTALL_HEADERS_DIR)
install-headers-cpio: stmp-int-hdrs install-include-dir
install-headers-cp: stmp-int-hdrs install-include-dir
INSTALL_HEADERS_DIR = @build_install_headers_dir@
INSTALL_HEADERS=install-headers install-mkheaders
# install-headers-tar, install-headers-cpio or install-headers-cp.
install-headers-tar: stmp-int-hdrs install-include-dir
install-html: $(HTMLS_BUILD) lang.install-html
# install-html. The lang.html file triggers language fragments to build
install-include-dir: installdirs
	    install-info --dir-file=$(DESTDIR)$(infodir)/dir $@; \
install-info:: doc installdirs \
INSTALL = @INSTALL@
install: install-common $(INSTALL_HEADERS) \
install: install-plugin
install-itoolsdirs: installdirs
# Install lto-wrapper.
install-lto-wrapper: lto-wrapper$(exeext)
install-man: lang.install-man \
install-mkheaders: stmp-int-hdrs install-itoolsdirs \
	    install_name=`echo $$i|sed '$(program_transform_name)'` ;\
	  install_name=`echo gcc-$$i|sed '$(program_transform_name)'`$(exeext) ;\
install-no-fixedincludes:
install-pdf: $(PDFFILES) lang.install-pdf
install-plugin: installdirs lang.install-plugin s-header-vars install-gengtype
install-po:
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
INSTALL_PROGRAM = @INSTALL_PROGRAM@
	"INSTALL_SCRIPT=$(INSTALL_SCRIPT)" \
INSTALL_SCRIPT = @INSTALL@
install_sh = $(SHELL) $(srcdir)/../install-sh
install-strip: install
install-strip: override INSTALL_PROGRAM = $(INSTALL_STRIP_PROGRAM)
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
install-strip: STRIPPROG = $(STRIP)
# Install supporting files for fixincludes to be run later.
# Install the compiler executables built during cross compilation.
# Install the driver last so that the window when things are
# Install the driver program as $(libsubdir)/gcc for collect2.
# Install the driver program as $(target_noncanonical)-gcc,
# Install the headers needed to build a plugin.
# Install the include directory using cp.
# Install the include directory using cpio.
# Install the include directory using tar.
# Install the info files.
# Install the man pages.
# Install the README
install-: ; @true
# Install with the gcc headers files, not the fixed include files, which we
# Instead of forcing everyone to edit POTFILES.in, which proved impractical,
.INTERMEDIATE: cpp.pod gcc.pod gfdl.pod fsf-funding.pod gpl.pod
INTERNAL_CFLAGS = -DIN_GCC $(PICFLAG) @CROSS@
  internal-fn.def
INTERNAL_FN_DEF = internal-fn.def
INTERNAL_FN_H = internal-fn.h $(INTERNAL_FN_DEF)
	internal-fn.o \
# Internationalization library.
# in the kernel.  So, we use `echo' instead.
# In the past we used AC_PROG_CC_C_O and set this properly, but
  intl.h $(PLUGIN_VERSION_H) $(DIAGNOSTIC_H) ${C_TREE_H} \
	ipa-comdats.o \
	ipa-cp.o \
	ipa-devirt.o \
	ipa-fnsummary.o \
	ipa-free-lang-data.o \
	ipa-icf-gimple.o \
	ipa-icf.o \
	ipa-inline-analysis.o \
	ipa-inline.o \
	ipa-inline-transform.o \
	ipa-modref.o \
	ipa-modref-tree.o \
	ipa.o \
  ipa-param-manipulation.h $(C_PRAGMA_H)  $(CPPLIB_H)  $(FUNCTION_H) \
	ipa-param-manipulation.o \
	ipa-polymorphic-call.o \
	ipa-predicate.o \
	ipa-profile.o \
IPA_PROP_H = ipa-prop.h $(TREE_H) $(VEC_H) $(CGRAPH_H) $(GIMPLE_H) alloc-pool.h
	ipa-prop.o \
	ipa-pure-const.o \
IPA_REFERENCE_H = ipa-reference.h $(BITMAP_H) $(TREE_H)
	ipa-reference.o \
	ipa-ref.o \
	ipa-split.o \
	ipa-sra.o \
IPA_UTILS_H = ipa-utils.h $(TREE_H) $(CGRAPH_H)
	ipa-utils.o \
	ipa-visibility.o \
	ira-build.o \
	ira-color.o \
	ira-conflicts.o \
	ira-costs.o \
	ira-emit.o \
	ira-lives.o \
	ira.o \
# is desirable (if -jN is used).  If desirable, recursive make is run with
# is likely the most exercised during the build
ISLINC = @ISLINC@
ISLLIBS = @ISLLIBS@
# isn't gcc; configure determines that.  WARN_CFLAGS will be either
# is run with check-parallel-$lang goal and check_$lang_parallelize variable
# is unchanged, make will try to update tree-check.h every time it runs.
# It also specifies -isystem ./include to find, e.g., stddef.h.
# it built).  The second time through we have the dependency file.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# It does not try to create a file with the name "null.s" on POSIX and
# It is named cstamp-h.in and not stamp-h.in so the mostlyclean rule doesn't
# It is part of c-family because the handled extensions are hard-coded
itoolsdatadir = $(libsubdir)/install-tools
itoolsdir = $(libexecsubdir)/install-tools
# It remains in the source directory and is part of the distribution.
# its dependencies.
# It specifies -B./.
# it's too difficult to tell when to and when not to pass -B (not all targets
#it under the terms of the GNU General Public License as published by
# it was discovered that this hadn't worked in a long time, so now
# -I../zlib, unless we were configured with --with-system-zlib, in which
	json.o \
	jump.o \
# just as /usr/include is.
	  lang=`basename $$cat | sed 's/\.gmo$$//'`; \
lang_checks=
lang_checks_parallel = $(lang_checks:=//%)
lang_checks_parallelized=
LANG_CONFIGUREFRAGS  = @all_lang_configurefrags@
LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)
	langhooks.o \
	lang.install-info
LANG_MAKEFRAGS = @all_lang_makefrags@
lang_opt_files=@lang_opt_files@ $(srcdir)/c-family/c.opt $(srcdir)/common.opt $(srcdir)/params.opt $(srcdir)/analyzer/analyzer.opt
lang_specs_files=@lang_specs_files@
lang_tree_files=@lang_tree_files@
@language_hooks@
# language hooks, generated by configure
# Language-independent files.
# Language-independent object files.
# Language makefile fragments.
	      --language=none --regex="/\(char\|unsigned int\|int\|bool\|void\|HOST_WIDE_INT\|enum [A-Za-z_0-9]+\) [*]?\([A-Za-z_0-9]+\)/\2/" common.opt	\
	      --language=none --regex="/\(DEF_RTL_EXPR\|DEFTREECODE\|DEFGSCODE\|DEFTIMEVAR\|DEFPARAM\|DEFPARAMENUM5\)[ ]?(\([A-Za-z_0-9]+\)/\2/" rtl.def tree.def gimple.def timevar.def \
	LANGUAGES="$(CONFIG_LANGUAGES)" \
	LANGUAGES="$(CONFIG_LANGUAGES)" $(SHELL) config.status
	  LANGUAGES="$(CONFIG_LANGUAGES)" $(SHELL) config.status --recheck; \
LANGUAGES = c $(CONFIG_LANGUAGES)
LANGUAGES += gcov$(exeext) gcov-dump$(exeext) gcov-tool$(exeext)
# Language-specific object files shared by all C-family front ends.
# language subdir, gt-file.h otherwise (no subdir indication for config/
.l.c:
	LC_ALL=C ; export LC_ALL ; \
  lcm.h cfgloopmanip.h file-prefix-map.h builtins.def $(INSN_ATTR_H) \
	lcm.o \
LDEXP_LIB = @LDEXP_LIB@
	"LDFLAGS=$(LDFLAGS)" \
LDFLAGS = @LDFLAGS@
LD_SONAME_OPTION = @ld_soname_option@
LD_VERSION_SCRIPT_OPTION = @ld_version_script_option@
# (less duplicated code).
libbackend.a: $(OBJS)
LIBBACKTRACE = ../libbacktrace/.libs/libbacktrace.a
libcommon.a: $(OBJS-libcommon)
libcommon-target.a: $(OBJS-libcommon-target)
 libcommon-target.a libcommon.a libgcc.mk perf.data
LIBCONVERT =
	      ../libcpp/*.c ../libcpp/include/*.h \
LIBDECNUMBER = ../libdecnumber/libdecnumber.a
LIBDEPS= libcommon.a $(CPPLIB) $(LIBIBERTY) $(LIBINTL_DEP) $(LIBICONV_DEP) \
libdir = @libdir@
libexecdir = @libexecdir@
libexecsubdir = $(libexecdir)/gcc/$(real_target_noncanonical)/$(version)$(accel_dir_suffix)
	"libexecsubdir=$(libexecsubdir)" \
libgcc.mvars: config.status Makefile specs xgcc$(exeext)
	libgcc-support lang.all.cross doc selftest @GENINSRC@ srcextra
	libgcc-support lang.start.encap @GENINSRC@ srcextra
libgcc-support: libgcc.mvars stmp-int-hdrs $(TCONFIG_H) \
libgcov-driver-tool.o: $(srcdir)/../libgcc/libgcov-driver.c $(GCOV_TOOL_DEP_FILES)
libgcov-driver-tool.o-warn = -Wno-error
libgcov-merge-tool.o: $(srcdir)/../libgcc/libgcov-merge.c $(GCOV_TOOL_DEP_FILES)
libgcov-merge-tool.o-warn = -Wno-error
libgcov-util.o: $(srcdir)/../libgcc/libgcov-util.c $(GCOV_TOOL_DEP_FILES)
libgcov-util.o-warn = -Wno-error
LIBIBERTY = ../libiberty/$(LIBIBERTY_PICDIR)/libiberty.a
LIBIBERTY = ../libiberty/libiberty.a
LIBIBERTY_PICDIR=$(if $(findstring mingw,$(target)),,pic)
LIBICONV_DEP = @LIBICONV_DEP@
LIBICONV = @LIBICONV@
LIBINTL_DEP = @LIBINTL_DEP@
# libintl.h will be found in ../intl if we are using the included libintl.
LIBINTL = @LIBINTL@
# Libraries to use on the host.
# library is not introduced.  If HOST_LIBS is not set, link with
# Libs and linker options needed for plugin support
LIBS = @LIBS@ libcommon.a $(CPPLIB) $(LIBINTL) $(LIBICONV) $(LIBBACKTRACE) \
# Libs needed (at present) just for jcf-dump.
	    libsubdir=. ; \
libsubdir = $(libdir)/gcc/$(real_target_noncanonical)/$(version)$(accel_dir_suffix)
	"libsubdir=$(libsubdir)" \
libsubdir_to_prefix := \
# Like LINKER, but use a mutex for serializing front end links.
# Likewise, for use in the tools that must run on this machine
# Likewise, for use in the tools that must run on this machine
# Likewise.  Put INCLUDES at the beginning: this way, if some autoconf macro
LIMITS_H_TEST = [ -f $(BUILD_SYSTEM_HEADER_DIR)/limits.h ]
# link against.  In that case, link with $(CC) so that the -lstdc++
LINKER = $(CC)
LINKER = $(CXX)
LINKER += $(NO_PIE_FLAG)
LINKER_FLAGS = $(CFLAGS)
LINKER_FLAGS = $(CXXFLAGS)
LINKER_FOR_BUILD = $(CXX_FOR_BUILD)
LINKER_PLUGIN_API_H = $(srcdir)/../include/plugin-api.h
# Linker plugin API headers
LINK_PROGRESS = :
LINK_PROGRESS = msg="Linking $@ |"; cnt=0; if test "$(2)" = start; then \
# Link with -no-pie since we compile the compiler with -fno-PIE.
LIPO_FOR_TARGET = lipo
	@list='$(DVIFILES)'; for p in $$list; do \
	@list='$(HTMLS_INSTALL)'; for p in $$list; do \
	@list='$(PDFFILES)'; for p in $$list; do \
	list='$(SUBDIRS)'; for dir in $$list; do	\
# List of additional header files to install.
# List of extra executables that should be compiled for this target machine
# List of extra libraries that should be linked with the gcc driver.
# List of extra object files that should be compiled and linked with
# List of extra object files that should be compiled and linked with
# List of language subdirectories.
# List of things which should already be built whenever we try to use xgcc
	lists.o \
# Lists of files for various purposes.
# List the directories or single hmtl files which are installed by
# List the html file targets.
LLINKER = $(LINKER)
LLINKER = $(SHELL) $(srcdir)/lock-and-run.sh linkfe.lck $(LINKER)
	"LN=$(LN)" \
LN=@LN@
	"LN_S=$(LN_S)" \
	      ln -s `echo $$i | sed "s|/[^/]*|/..|g" | sed 's|/..$$||'``echo "$$dest" | sed "s|$$dir||"` $(DESTDIR)$(libsubdir)/include-fixed/$$i; \
LN_S=@LN_S@
localedir = $(datadir)/locale
	"localedir=$(localedir)"
local_includedir = $(local_prefix)/include
	"local_prefix=$(local_prefix)" \
local_prefix = @local_prefix@
# Locate mkinstalldirs.
	loop-doloop.o \
	loop-init.o \
	loop-invariant.o \
	loop-iv.o \
	 loop.texi generic.texi gimple.texi plugins.texi optinfo.texi   \
	loop-unroll.o \
# LOOSE_WARN are the warning flags to use when compiling something
LOOSE_WARN = @loose_warn@
	lower-subreg.o \
	lra-assigns.o \
	lra-coalesce.o \
	lra-constraints.o \
	lra-eliminations.o \
	lra-lives.o \
	lra.o \
	lra-remat.o \
	lra-spills.o \
	lsf="$(lang_specs_files)"; for f in $$lsf; do \
	ltf="$(lang_tree_files)"; for f in $$ltf; do \
	lto-cgraph.o \
	lto-compress.o \
# lto-compress.o needs $(ZLIBINC) added to the include flags.
	 lto-dump.texi
	lto-opts.o \
	lto-section-in.o \
	lto-section-out.o \
LTO_STREAMER_H = lto-streamer.h $(LINKER_PLUGIN_API_H) $(TARGET_H) \
	lto-streamer-in.o \
	lto-streamer.o \
	lto-streamer-out.o \
lto-wrapper$(exeext): $(LTO_WRAPPER_OBJS) libcommon-target.a $(LIBDEPS)
LTO_WRAPPER_OBJS = lto-wrapper.o collect-utils.o ggc-none.o
  lto-wrapper.o collect-utils.o
MACHMODE_H = machmode.h mode-classes.def insn-modes.h
# macro is also used in a double-quoted context.
  macro_list fixinc_list
macro_list: s-macro_list; @true
@MAINT@ $(srcdir)/config.in: $(srcdir)/cstamp-h.in
@MAINT@ $(srcdir)/cstamp-h.in: $(srcdir)/configure.ac
maintainer-clean:
# `maintainer-clean' also deletes everything that could be regenerated
# maintainer mode, and '' otherwise.
# maintainer rules.  So, ENABLE_MAINTAINER_RULES is 'true' in
@MAINT@ AUTOHEADER = autoheader
@MAINT@	(cd $(srcdir) && $(AUTOHEADER))
@MAINT@	echo timestamp > $(srcdir)/cstamp-h.in
@MAINT@ ENABLE_MAINTAINER_RULES = true
# "MAINT := #" in non-maintainer mode, but because '#' starts a comment,
MAINT := @MAINT@
@MAINT@	@rm -f $(srcdir)/cstamp-h.in
Makefile: config.status $(srcdir)/Makefile.in $(LANG_MAKEFRAGS)
# Makefile for GNU Compiler Collection
# Makefile.  It is used for all compilations.
# Makefiles may override it and name another file to be generated from
	"MAKEINFO=$(MAKEINFO)" \
	"MAKEINFOFLAGS=$(MAKEINFOFLAGS)" \
MAKEINFOFLAGS = --no-split
MAKEINFO = @MAKEINFO@
#   make -j3 check-gcc//sh-hms-sim/{-m1,-m2,-m3,-m3e,-m4}/{,-nofpu}
	"MAKEOVERRIDES=" \
MAKEOVERRIDES =
# make sure that when we build info files, the used tm.texi is up to date.
# Make sure the $(MAKE) variable is defined.
man: $(MANFILES) lang.man @GENINSRC@ srcman lang.srcman
man1dir = $(mandir)/man1
man1ext = .1
man7dir = $(mandir)/man7
man7ext = .7
mandir = @mandir@
MANFILES = doc/gcov.1 doc/cpp.1 doc/gcc.1 doc/gfdl.7 doc/gpl.7 \
	 match-and-simplify.texi analyzer.texi ux.texi poly-int.texi
	mcf.o \
MD5_H	    = $(srcdir)/../include/md5.h
MD_DEPS = s-mddeps $(md_file) $(MD_INCLUDES)
mddump: $(BUILD_RTL) $(MD_DEPS) build/genmddump$(build_exeext)
md_file=$(srcdir)/common.md $(srcdir)/config/@md_file@
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# message if it doesn't, but the testsuite is supposed to ignore the message -
# might be on a read-only file system.  If configured for maintainer mode
# might be used or tested by Make-lang fragments.
min-insn-modes.c: s-modes-m; @true
	mkdir $(DESTDIR)$(libsubdir)/include-fixed
	-mkdir include
mkinstalldirs=$(SHELL) $(srcdir)/../mkinstalldirs
	mode-switching.o \
	modulo-sched.o \
# more portable than a trailing "-e d" to filter out the uninteresting lines,
#   `mostlyclean', `clean', `distclean' and `maintainer-clean'.
# mostlyclean, clean, distclean, maintainer-clean,
MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \
# `mostlyclean' is useful while working on a particular type of machine.
mostlyclean: lang.mostlyclean
# Most of these files ARE PRESENT in the GCC distribution.
# move-if-change built-in
  msg="$${msg}--"; cnt=`expr $$cnt + 1`; \
  msg="$${msg}| `expr 100 \* $$idx / $(SERIAL_COUNT)`%"; echo "$$msg"
MSGMERGE = msgmerge
# Multiarch support
	      multi_dir=/$${multi_dir}; \
	    multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \
	  multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \
	  multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \
	    multi_dir=`echo $${ml} | sed -e 's/;.*$$//'`; \
multilib.h: s-mlib; @true
	multiple_target.o \
# must not be overwritten with a identical copy. One solution is to use a
	    mux-utils.h rtlanal.h memmodel.h $(EMIT_RTL_H) \
	  mv $@.tmp $@; \
	      mv -f $$dir/$*.sum $$dir/$*.sum.sep; mv -f $$dir/$*.log $$dir/$*.log.sep; \
	mv -f $@T $@
		mv -f $(@).T$$$$ $@) || \
		mv -f $(@).T$$$$ $@) || \
	      mv -f $(target_noncanonical)-gcc-tmp$(exeext) $(GCC_TARGET_INSTALL_NAME)$(exeext) ); \
	mv -f T$@ $@
	mv -f T$@ $@
            mv include/$$file include/x_$$file; \
	-mv include-fixed tmp-include-fixed 2>/dev/null
	-mv include tmp-include 2>/dev/null
	-@mv site.exp site.bak
	-mv stmp-fixinc tmp-stmp-fixinc 2>/dev/null
	-mv stmp-int-hdrs tmp-stmp-int-hdrs 2>/dev/null
	mv tmp2-tm.texi tmp-tm.texi
	mv tmp-libgcc.mvars libgcc.mvars
	mv tmp-specs $(SPECS)
	-mv tmp-stmp-fixinc stmp-fixinc 2>/dev/null
	-mv tmp-stmp-int-hdrs stmp-int-hdrs 2>/dev/null
	   && [ -n "$$GCC_RUNTEST_PARALLELIZE_DIR" ] \
# Native compiler for the build machine and its switches.
# Native compiler that we use.  This may be C++ some day.
native: config.status auto-host.h build-@POSUB@ $(LANGUAGES) \
native: gengtype$(exeext)
# Native linker and preprocessor flags.  For x-fragment overrides.
# Native linker that we use.
NATIVE_SYSTEM_HEADER_DIR = @NATIVE_SYSTEM_HEADER_DIR@
# N.B. We do not attempt to copy these into $(srcdir).  The snapshot
NETLIBS = @NETLIBS@
# newer than configure.  Also, this writes into the source directory which
# ??? Newer versions have a maintainer mode that may be useful here.
# newlib's crt0.o if it exists.  This will cause a "path prefix not used"
# nice if targets that depend on tree-check.h wouldn't be rebuild
NM_FOR_TARGET = ./nm
NM = @NM@
# No big deal since gencondmd.c is a dummy file for non-GCC compilers.
NOCOMMON_FLAG = @nocommon_flag@
NOEXCEPTION_FLAGS = @noexception_flags@
.NOEXPORT:
# no front end should ever look at (e.g. everything RTL related).
# (non-Unix) host which cannot build collect2, for which it will be
	  NO_PIE_CFLAGS=; \
	  NO_PIE_CFLAGS="-fno-PIE"; \
NO_PIE_CFLAGS = @NO_PIE_CFLAGS@
NO_PIE_FLAG = @NO_PIE_FLAG@
# Normally identical to target_noncanonical, except for compilers built
# no target dependencies.
# Note a subtlety here: we use $(@D) for the directory part, to make
# Note for the stamp targets, we run the program `true' instead of
# NOTE: local_prefix *should not* default from prefix.
# Note that dependencies on obstack.h are not written
# Note that exgettext has an awk script embedded in it which requires a
# NOTE: This directory must exist when you start installation.
# (*) Note this pattern overwrites the first character of the string
# nothing has changed.
# Now figure out from those variables how to compile and link.
# Now that LANG_MAKEFRAGS are included, we can add special flags to the
# "nul" instead of "/dev/null" if we're building on a mingw machine.
# "nul.s" on Windows. Because on Windows "nul" is a reserved file name.
		-o $@ $<
OBJC_BOEHM_GC=@objc_boehm_gc@
objdir := $(shell pwd)
# Object files for gcc many-languages driver.
# objects from $(OBJS) as early as possible, build all their
# Objects in libcommon.a, potentially used by all host binaries and with
# Objects in libcommon-target.a, used by drivers and by the core
# objects that belong to the front ends.  We add an extra define that
	"objext=$(objext)" \
objext = .o
OBJS = \
OBJS-libcommon = diagnostic-spec.o diagnostic.o diagnostic-color.o \
OBJS-libcommon-target = $(common_out_object_file) prefix.o \
OBSTACK_H   = $(srcdir)/../include/obstack.h
# off if they wish.
	   -o g++.qmr ${QMTEST_GPP_TESTS}
	  omp-device-properties.h
omp-device-properties.h: s-omp-device-properties-h ; @true
omp_device_properties = @omp_device_properties@
omp-general.o: omp-device-properties.h
	omp-low.o \
	omp-simd-clone.o \
# on BCONFIG_H.  For the build objects, add -DGENERATOR_FILE manually,
# once with different options, so they have custom rules.  The
# One is for the build machine, and one is for the host to allow
# Only run it if maintainer mode is enabled.
# On MinGW plugin installation involves installing import libraries.
# On most systems, this is empty.
# on sysV, define this as cp.
# On the target machine, finish building a cross compiler.
# On the use of stamps:
OPTABS_H = optabs.h insn-codes.h insn-opinit.h
	optabs-libfuncs.o \
	optabs.o \
	optabs-query.o \
	optabs-tree.o \
@option_includes@
optionlist: s-options ; @true
OPTIONS_C_EXTRA = $(PRETTY_PRINT_H)
options.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \
OPTIONS_H_EXTRA =
OPTIONS_H = options.h flag-types.h $(OPTIONS_H_EXTRA)
options.h: s-options-h ; @true
       options.h target-hooks-def.h insn-opinit.h \
options-save.c: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \
	options-save.o \
	opts-global.o \
OPTS_H = $(INPUT_H) $(VEC_H) opts.h $(OBSTACK_H)
	opts.o opts-common.o options.o vec.o hooks.o common/common-targhooks.o \
ORIGINAL_AS_FOR_TARGET = @ORIGINAL_AS_FOR_TARGET@
ORIGINAL_LD_FOR_TARGET = @ORIGINAL_LD_FOR_TARGET@
ORIGINAL_NM_FOR_TARGET = @ORIGINAL_NM_FOR_TARGET@
OTHER_FIXINCLUDES_DIRS=
# otherwise.
# Otherwise $(SELFTEST_DEPS) is empty when used from <LANG>/Make-lang.in.
# otherwise override the specs built into the driver.
out_file=$(srcdir)/config/@out_file@
out_object_file=@out_object_file@
# out of date.  Yuck.
# output of `cd', but some shells lose on redirection within `()'s
OUTPUT_OPTION = -o $@
# overflows a command line!) and then have gengtype read the file in.
# override optimization flags and we'd like them to still have warnings
# overrides it, so use of GCC_EXEC_PREFIX will not result in using GCC files
# packages that use autoconf (??? perhaps also to avoid problems with patch?).
# parallel, as they are run in separate directories.
# Parameters:
PARAMS_H = params.h params-enum.h params.def
paranoia.o: $(srcdir)/../contrib/paranoia.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H)
paranoia: paranoia.o real.o $(LIBIBERTY)
	passes.o \
pass-instances.def: $(srcdir)/passes.def $(PASSES_EXTRA) \
  pass-instances.def params.list $(srcdir)/../include/gomp-constants.h \
PATCHLEVEL_c := \
	    path=$$file; \
	    path=$(srcdir)/$$file; \
# Path to the system headers on the build machine.
# pattern rule for everything.
# patterns.  To use them, put each of the specific targets with its
pdf:: $(PDFFILES) lang.pdf
PDFFILES = doc/gcc.pdf doc/gccint.pdf doc/gccinstall.pdf doc/cpp.pdf \
pdf__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
# per-language makefile fragments
.PHONY: build- install- build-po install-po update-po
.PHONY: install-gcc-tooldir
.PHONY: install-no-fixedincludes
.PHONY: mddump
.PHONY: qmtest-g++
.PHONY: selftest
PICFLAG = @PICFLAG@
PKGVERSION  := @PKGVERSION@
PKGVERSION_s:= "\"@PKGVERSION@\""
plugin_bindir = $(libexecsubdir)/plugin
PLUGINCC = @CXX@
PLUGINCFLAGS = @CXXFLAGS@
PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \
PLUGIN_H = plugin.h $(GCC_PLUGIN_H)
  plugin_implib := $(if $(strip $(filter mingw%,$(host_os))),yes,no)
plugin_includedir = $(plugin_resourcesdir)/include
PLUGINLIBS = @pluginlibs@
	plugin.o \
plugin_resourcesdir = $(libsubdir)/plugin
# plugins to define their types and generate the supporting GGC
PLUGIN_VERSION_H = plugin-version.h configargs.h
POD2MAN = pod2man --center="GNU" --release="gcc-$(version)" --date=$(shell sed 's/\(....\)\(..\)\(..\)/\1-\2-\3/' <$(DATESTAMP))
%.pod: %.texi
po/gcc.pot: force
.po.gmo:
# point to the installed directory, not the build directory.
.po.pox:
	 portability.texi interface.texi passes.texi rtl.texi md.texi	\
# possibly nested within config or language subdirectories.  Match gengtype's
POSTCOMPILE =
POSTCOMPILE = @mv $(@D)/$(DEPDIR)/$(*F).TPo $(@D)/$(DEPDIR)/$(*F).Po
	postreload-gcse.o \
	postreload.o \
# Potentially run all selftest-<LANG>.  The various <LANG>/Make-lang.in can
.PRECIOUS: insn-config.h insn-flags.h insn-codes.h insn-constants.h \
# predicates from the back-end so those functions must be discarded.
PREDICT_H = predict.h predict.def
	predict.o \
	"prefix=$(prefix)" \
#  prefix     exec_prefix        result
  prefix.h tree-inline.h $(GIMPLE_PRETTY_PRINT_H) realmpfr.h \
prefix.o: $(BASEVER)
prefix = @prefix@
prefix_to_exec_prefix := \
PREPROCESSOR_DEFINES = \
# prerequisites strictly before all objects.
# present), and build and host are the same, fixincl for the host will
PRETTY_PRINT_H = pretty-print.h $(INPUT_H) $(OBSTACK_H) wide-int-print.h
	pretty-print.o intl.o \
#  - Prevent rebuilds of what normally depends on the headers, which is
	print-rtl.o \
  print-tree.h varasm.h context.h tree-phinodes.h stor-layout.h \
	print-tree.o \
# problem because the exact names of the sub-directories concerned is
	profile.o \
# programs built during a bootstrap.
# Programs which operate on the build machine
# Programs which produce files for the target machine
# Program to convert libraries.
program_transform_name := @program_transform_name@
	    props=`echo "$$prop" | sed 's/.*=//'`; \
# Provide quickstrap as a target that people can type into the gcc directory,
# Purge it of unnecessary internal relative paths
# puts -I options in CPPFLAGS, our include files in the srcdir will always
PWD_COMMAND = $${PWDCMD-pwd}
# pwd command to use.  Allow user to override default by setting PWDCMD in
QMTEST=${QMTEST_PATH} ${QMTESTFLAGS}
QMTEST_DIR=qmtestsuite
QMTESTFLAGS=
qmtest-g++: ${QMTEST_DIR}/context
QMTEST_GPP_TESTS=g++
qmtest-gui: ${QMTEST_DIR}/context
QMTEST_PATH=qmtest
QMTESTRUNFLAGS=-f none --result-stream dejagnu_stream.DejaGNUStream
# QMTest targets
quickstrap: all
RANLIB_FLAGS = @ranlib_flags@
	"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)" \
RANLIB_FOR_TARGET := $(shell \
RANLIB = @RANLIB@
READ_MD_H = $(OBSTACK_H) $(HASHTAB_H) read-md.h
	    realfile=`echo $$file | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
	    realfile=`echo $$f | sed -e 's|.*/\([^/]*\)$$|\1|'`; \
REAL_H = real.h $(MACHMODE_H)
real-install-headers-cp:
real-install-headers-cpio:
real-install-headers-tar:
# Really, really stupid make features, such as SUN's KEEP_STATE, may force
	realmpfr.o \
	real.o \
real_target_noncanonical:=@real_target_noncanonical@
# rebuild by the "tree-check.h: s-check" rule. To do this, add a dummy command:
# Rebuilding this configuration
	# Rebuild our internal headers, restore the original stamps so that
RECOG_H = recog.h
	recog.o \
# Recompile all the language-independent object files.
	ree.o \
	regcprop.o \
	reginfo.o \
	regrename.o \
REGSET_H = regset.h $(BITMAP_H) hard-reg-set.h
REGS_H = regs.h $(MACHMODE_H) hard-reg-set.h
	reg-stack.o \
	regstat.o \
# related sources).
# relatively harmless since the .po files do not directly depend on it.
	reload1.o \
	reload.o \
# Remaining build programs.
# Remake cpp.
# Remake internationalization support.
# Remake the info files.
	reorg.o \
# required for *-wrs-vxworks-* targets.
# require the selftests to be run by defining their selftest-<LANG> as
RESOURCE_H = resource.h hard-reg-set.h $(DF_H)
	resource.o \
rest.cross: specs
rest.encap: lang.rest.encap
#  - Restore as much of the original state as possible.
	# Restore the original set of maybe-fixed headers
REVISION    :=
REVISION    := $(srcdir)/REVISION  # [BRANCH revision XXXXXX]
REVISION_c  :=
REVISION_c  := $(shell cat $(REVISION))
REVISION_s  := "\"\""
REVISION_s  := \
                    -r gtype.state
# \r is not portable to Solaris tr, therefore we have a special
	-rmdir ada cp f java objc intl po testsuite plugin 2>/dev/null
	-rm -f $@
	-rm -f $@
	-rm -f $@
	-rm -f $@
	-rm -f $@
	-rm -f $@
	-rm -f $@
	-rm -f $@
	rm -f $@
	rm -f $@
	rm -f $@
	  rm -f $${include_dir}/limits.h; \
	-rm -f *$(coverageexts)
	rm -f $(@D)/*
	  rm -f $(DESTDIR)$(bindir)/$$install_name ; \
	    rm -f $(DESTDIR)$(bindir)/$$install_name$(exeext) ; \
	  rm -f $(DESTDIR)$(bindir)/$$target_install_name ; \
	      rm -f $(DESTDIR)$(bindir)/$$target_install_name$(exeext); \
	  rm -f $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext); \
	-rm -f $(DESTDIR)$(bindir)/$(CPP_INSTALL_NAME)$(exeext)
	    rm -f $(DESTDIR)$(bindir)/$(FULL_DRIVER_NAME); \
	-rm -f $(DESTDIR)$(bindir)/$(GCC_INSTALL_NAME)$(exeext)
	    rm -f $(DESTDIR)$(bindir)/$(GCOV_DUMP_INSTALL_NAME)$(exeext); \
	    rm -f $(DESTDIR)$(bindir)/$(GCOV_INSTALL_NAME)$(exeext); \
	    rm -f $(DESTDIR)$(bindir)/$(GCOV_TOOL_INSTALL_NAME)$(exeext); \
	    rm -f $(DESTDIR)$(bindir)/$(target_noncanonical)-gcc-tmp$(exeext); \
	-rm -f $(DESTDIR)$(infodir)/cpp.info* $(DESTDIR)$(infodir)/gcc.info*
	-rm -f $(DESTDIR)$(infodir)/cppinternals.info* $(DESTDIR)$(infodir)/gccint.info*
	    rm -f $(DESTDIR)$(libexecsubdir)/$$file; \
	    rm -f $(DESTDIR)$(libexecsubdir)/$$file; \
	      rm -f $(DESTDIR)$(libsubdir)/include-fixed/$$i; \
	rm -f $(DESTDIR)$(libsubdir)/specs
	    rm -f $(DESTDIR)$(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \
	  rm -f $(DESTDIR)$(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \
	-rm -f $(gcc_docdir)/*.info $(gcc_docdir)/*.1 $(gcc_docdir)/*.7 $(gcc_docdir)/*.dvi $(gcc_docdir)/*.pdf
	-rm -f $(MOSTLYCLEANFILES)
	-rm -f *$(objext) c-family/*$(objext)
		(rm -f $(@).T$$$$ && exit 1)
		(rm -f $(@).T$$$$ && exit 1)
	-rm -f *.[0-9][0-9].* */*.[0-9][0-9].*
	-rm -f *.asm
	-rm -f auto-host.h auto-build.h
	-rm -f build/*
	-rm -f *-checksum.cc
	-rm -f collect collect2 mips-tfile mips-tdump
	-rm -f config.h tconfig.h bconfig.h tm_p.h tm.h
	-rm -f config.status config.run config.cache config.bak
	-rm -f core */core
	-rm -f cpp.??s cpp.*aux
	-rm -f cs-*
	-rm -f cstamp-h
	-rm -f doc/*.dvi
	-rm -f doc/*.pdf
	-rm -f gcc.??s gcc.*aux
	-rm -f gcc.vrs gcc.kys gcc.tps gcc.pgs gcc.fns
	-rm -f gcov.pod
	-rm -f .gdbinit configargs.h
	-rm -f gt-*
	-rm -f gthr-default.h
	-rm -f gtype-*
	-rm -f gtype.state
	-rm -f gtyp-input.list
	    rm -f include/$$realfile; \
	  rm -f include-fixed/README; \
	  rm -f include/stdint-gcc.h; \
	rm -f include/stdint.h
            rm -f include/x_$$file; \
	-rm -f libgcc.a libgcc_eh.a libgcov.a
	-rm -f libgcc_s*
	-rm -f libunwind*
	-rm -f Makefile *.oaux
	-rm -f Make-lang Make-hooks Make-host Make-target
	-rm -f mddeps.mk
	-rm -f multilib.h tmpmultilib*
	-rm -f options.c options.h optionlist
	-rm -f site.exp site.bak testsuite/site.exp testsuite/site.bak
	-@rm -f ./site.tmp
	-@rm -f ./site.tmp
	-rm -f specs $(SPECS)
	-rm -f specs.h options.c options.h options-save.cc
	-rm -f */stamp-* */tmp-*
	-rm -f s-* tmp-* stamp-* stmp-*
	-rm -f TAGS */TAGS
	-rm -f testsuite/*.log testsuite/*.sum
	rm -f tmp-all-tree.def
	rm -f tmp-header-vars
	-rm -f tmp-omp-device-properties.h; \
	  rm -f tmp-site.exp; \
	rm -f tmp-site.exp; \
	-rm -f *.toc *.log *.vr *.fn *.cp *.tp *.ky *.pg
	-rm -f */*.toc */*.log */*.vr */*.fn */*.cp */*.tp */*.ky */*.pg
	-rm -rf $(DESTDIR)$(bindir)/$(GCC_INSTALL_NAME)$(exeext)
	-rm -rf $(DESTDIR)$(bindir)/$(GCOV_INSTALL_NAME)$(exeext)
	-rm -rf $(DESTDIR)$(libexecsubdir)
	-rm -rf $(DESTDIR)$(libsubdir)
	-rm -rf $(DESTDIR)$(libsubdir)/include-fixed
	-rm -rf $(DESTDIR)$(man1dir)/$(GCC_INSTALL_NAME)$(man1ext)
	-rm -rf $(DESTDIR)$(man1dir)/cpp$(man1ext)
	  rm -rf $(MULTILIB_DIRNAMES); \
	-rm -rf ${QMTEST_DIR} stamp-qmtest
	  rm -rf $(TESTSUITEDIR)/$(check_p_subdir); \
	-rm -rf $(TESTSUITEDIR)/$*-parallel
	  rm -rf $(TESTSUITEDIR)/$*-parallel || true; \
	  rm -rf `echo $(MULTILIB_OPTIONS) | sed -e 's/\// /g'`; \
	rm -rf include-fixed; mkdir include-fixed
	-rm -rf include-fixed; mv tmp-include-fixed include-fixed 2>/dev/null
	-rm -rf include include-fixed
	-rm -rf include; mv tmp-include include 2>/dev/null
	-rm -rf libbackend.a
	-rm -rf libcommon.a
	-rm -rf libcommon-target.a
	-rm -rf linkfe.lck lock-stamp.*
	-rm -rf tmp-include
	-(rootme=`${PWD_COMMAND}`; export rootme; \
	rtlanal.o \
RTL_BASE_H = coretypes.h rtl.h rtl.def $(MACHMODE_H) reg-notes.def \
  rtl.def insn-notes.def errors.h version.h     		\
	rtl-error.o \
RTL_H = $(RTL_BASE_H) $(FLAGS_H) genrtl.h
	rtlhash.o \
	rtlhooks.o \
	rtl.o \
	    rtl-ssa/accesses.h rtl-ssa/insns.h rtl-ssa/blocks.h \
	rtl-ssa/accesses.o \
	    rtl-ssa/access-utils.h rtl-ssa/insn-utils.h rtl-ssa/movement.h \
	rtl-ssa/blocks.o \
	    rtl-ssa/changes.h rtl-ssa/functions.h rtl-ssa/is-a.inl \
	rtl-ssa/changes.o \
	    rtl-ssa/change-utils.h rtl-ssa/member-fns.inl
	rtl-ssa/functions.o \
RTL_SSA_H = $(PRETTY_PRINT_H) insn-config.h splay-tree-utils.h \
	rtl-ssa/insns.o \
rtl-ssa-warn = $(STRICT_WARN)
	rtl-tests.o \
	rtx-vector-builder.o \
# Rule for regenerating the message template (gcc.pot).
# Rule for the generator programs:
# Rules for generating translated message descriptions.
# Run 'configure' to generate Makefile from Makefile.in
RUN_GEN = @valgrind_command@
# Run Paranoia on real.c.
	run-rtl-passes.o \
RUNTESTFLAGS =
	  RUNTESTFLAGS="--target_board=$$variant $(RUNTESTFLAGS)" \
RUNTEST = `if [ -f $${srcdir}/../dejagnu/runtest ] ; then \
# Run the G++ testsuite using QMTest.
# Run the selftests during the build once we have a driver and the frontend,
                    -S $(srcdir) -I gtyp-input.list -w tmp-gtype.state
s-alltree: Makefile
	sancov.o \
	sanopt.o \
s-attrtab : $(MD_DEPS) build/genattrtab$(build_exeext) \
	sbitmap.o \
s-bversion: BASE-VER
s-case-cfn-macros: build/gencfn-macros$(build_exeext)
s-cfn-operators: build/gencfn-macros$(build_exeext)
# s-check : build/gencheck$(build_exeext)
# s-check : build/gencheck$(build_exeext)
s-check : build/gencheck$(build_exeext)
	sched-deps.o \
	sched-ebb.o \
	sched-rgn.o \
s-common-target-hooks-def-h: build/genhooks$(build_exeext)
s-conditions: $(MD_DEPS) build/genconditions$(build_exeext)
s-condmd: build/gencondmd$(build_exeext)
s-constrs-h: $(MD_DEPS) build/genpreds$(build_exeext)
# scratch space during QMTest's execution.
# script does that.
s-c-target-hooks-def-h: build/genhooks$(build_exeext)
	sdbout.o \
s-d-target-hooks-def-h: build/genhooks$(build_exeext)
# Second, read the state file and generate all files.  This ensure that
# Sed command to transform gcc to installed name.
    sed -e 's|^$(prefix)||' -e 's|/$$||' -e 's|^[^/]|/|' \
    sed -e 's|^$(prefix)||' -e 's|^/||' -e '/./s|$$|/|')
			| sed -e "s|/[^ ]*/|/|g" -e "s|gt-config/|gt-|g"))
	  sed -n -e 's/^#define \([^_][a-zA-Z0-9_]*\).*/\1/p' \
	    sed -n 's/^'$${kind}': //p' $${props} \
	      | sed 's/[[:blank:]]/ /g;s/  */ /g;s/^ //;s/ $$//;s/ /\\0/g;s/^/"/;s/$$/\\0\\0"/' \
	sed '/set tmpdir/ s|testsuite$$|$(TESTSUITEDIR)/$*|' \
	  sed '/set tmpdir/ s|testsuite$$|$(TESTSUITEDIR)/$(check_p_subdir)|' \
	sed '/set tmpdir/ s|testsuite$$|$(TESTSUITEDIR)|' < site.exp > $@
# See below for how to change them for certain systems.
# See discussion about the use of `pwd` above
# seems like too selective a test.
# Selection of languages to be made.
selftest: $(SELFTEST_TARGETS)
SELFTEST_DEPS = $(GCC_PASSES) stmp-int-hdrs $(srcdir)/testsuite/selftests
# SELFTEST_DEPS need to be set before including language makefile fragments.
SELFTEST_FLAGS = -nostdinc $(DEVNULL) -S -o $(DEVNULL) \
	selftest.o selftest-diagnostic.o sort.o
SELFTEST_TARGETS = @selftest_languages@
	sel-sched-dump.o \
	sel-sched-ir.o \
	sel-sched.o \
	sese.o \
# Set by autoconf to "all.internal" for a native build, or
	  set -e; for ml in `$(GCC_FOR_TARGET) -print-multi-lib`; do \
	  set -e; for ml in `cat fixinc_list`; do \
	set -e; for ml in `cat fixinc_list`; do \
	set -e; for ml in `cat fixinc_list`; do \
# Set if the compiler was configured with --with-build-sysroot.
@SET_MAKE@
# set to empty.
# Set to 'yes' if the LTO front end is enabled.
# Setup the testing framework, if you have one
# severe command-line-length limitations.
s-fixinc_list : $(GCC_PASSES)
	    sfx=`$(GCC_FOR_TARGET) $${flags} -print-sysroot-headers-suffix`; \
s-genrtl-h: build/gengenrtl$(build_exeext)
s-gtype: $(EXTRA_GTYPE_DEPS) build/gengtype$(build_exeext) \
s-gtyp-input: Makefile
s-header-vars: Makefile
	"SHELL=$(SHELL)" \
	      SHELL='$(SHELL)'; MACRO_LIST=`${PWD_COMMAND}`/macro_list ; \
SHELL = @SHELL@
# Shorthand variables for dependency lists.
# should be passed to runtest.
# Should we build position-independent host code?
	shrink-wrap.o \
# significant - do not remove it.
	@# significantly reduces build times.
simple_generated_c	= $(simple_rtl_generated_c) insn-enums.cc
simple_generated_h	= $(simple_rtl_generated_h) insn-constants.h
simple_rtl_generated_c	= insn-automata.c insn-emit.c \
simple_rtl_generated_h	= insn-attr.h insn-attr-common.h insn-codes.h \
	simplify-rtx.o \
# Since gcc_tooldir does not exist at build-time, use -B$(build_tooldir)/bin/
# since they need to run on this machine
site.exp: ./config.status Makefile
		< ../../site.exp > tmp-site.exp; \
		< ../../site.exp > tmp-site.exp; \
s-macro_list : $(GCC_PASSES) cc1$(exeext)
s-match: build/genmatch$(build_exeext) $(srcdir)/match.pd cfn-operators.pd
s-mddeps: $(md_file) $(MD_INCLUDES) build/genmddeps$(build_exeext)
s-mlib: $(srcdir)/genmultilib Makefile
s-modes: build/genmodes$(build_exeext)
s-modes-h: build/genmodes$(build_exeext)
s-modes-inline-h: build/genmodes$(build_exeext)
s-modes-m: build/genmodes$(build_exeext)
# so copy instead
# Some systems may be missing symbolic links, regular links, or both.
# Some versions of `touch' (such as the version on Solaris 2.8)
s-omp-device-properties-h: @omp_device_property_deps@
s-opinit: $(MD_DEPS) build/genopinit$(build_exeext) insn-conditions.md
s-options: $(ALL_OPT_FILES) Makefile $(srcdir)/opt-gather.awk
s-options-h: optionlist $(srcdir)/opt-functions.awk $(srcdir)/opt-read.awk \
	  sort -u > tmp-macro_list
# so that *config.h will be found in the compilation
# so that self-test failures are caught as early as possible.
# so they can override or augment language-specific variables
	 sourcebuild.texi gty.texi libgcc.texi cfg.texi tree-ssa.texi	\
	SOURCEDIR=$(abs_docdir) \
# So use `exit 0' to ignore its exit status.
	sparseset.o \
# specific dependencies but no build commands.
# Specify a dummy input file to placate the driver.
# Specify -nostdinc to work around missing WIND_BASE environment variable
# Specify -o /dev/null so the output of -S is discarded. More importantly
# Specify the directories to be searched for header files.
# Specify the path to gcc/testsuite/selftests within the srcdir
specs.h : s-specs ; @true
SPECS = specs
	spellcheck.o \
	spellcheck-tree.o \
# spelling.
SPLAY_TREE_H= $(srcdir)/../include/splay-tree.h
s-preds: $(MD_DEPS) build/genpreds$(build_exeext)
s-preds-h: $(MD_DEPS) build/genpreds$(build_exeext)
	srcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ; \
	srcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ; \
srcdir = @srcdir@
	srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`; \
srcextra: gcc.srcextra lang.srcextra
srcinfo: $(INFOFILES)
srcman: $(MANFILES)
	sreal.o \
  ssa-iterators.h $(RESOURCE_H) tree-cfgcleanup.h attribs.h calls.h \
# s-selftest-<LANG>.  Otherwise, they should define it as empty.
# s-* so that mostlyclean does not force the include directory to
s-specs : Makefile
	stack-ptr-mod.o \
  ../stage_current)),stageautofeedback)
STAMP = echo timestamp >
# stampfile idiom is the same.
# Standard autoconf-set variables
	 standards.texi invoke.texi extend.texi md.texi objc.texi	\
s-target-hooks-def-h: build/genhooks$(build_exeext)
start.encap: native xgcc$(exeext) cpp$(exeext) specs \
	# Stash the current set of headers away, save stamps we're going to
	statistics.o \
stmp-fixinc: gsyslimits.h macro_list fixinc_list \
STMP_FIXINC = @STMP_FIXINC@
stmp-int-hdrs: $(STMP_FIXINC) $(T_GLIMITS_H) $(T_STDINT_GCC_H) $(USER_H) fixinc_list
s-tm-texi: $(srcdir)/doc/../doc/tm.texi
s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in
	stmt.o \
	store-motion.o \
	stor-layout.o \
	streamer-hooks.o \
# STRICT_WARN are the additional warning flags to
STRICT_WARN = @strict_warn@
	stringpool.o \
STRIP_FOR_TARGET := $(shell \
# subdirectory rather than in the source directory.
SUBDIRS =@subdirs@ build
# subprocesses and overrides the setting from the user's environment.
.SUFFIXES:
.SUFFIXES: .c .c .o .po .pox .gmo
# suffixes, in form sysroot;multilib.
	      sums="$$sums $$dir/$*.sum.sep"; logs="$$logs $$dir/$*.log.sep"; \
	  sums= ; logs= ; \
# Support for additional languages (other than C).
# Suppress smart makes who think they know how to automake yacc and flex file
# surrounding punctuation and spaces, and with the datestamp and
s-version: build/genversion$(build_exeext)
# switches.
SYMTAB_H = $(srcdir)/../libcpp/include/symtab.h $(OBSTACK_H)
	symtab.o \
SYSLIBS = @GNAT_LIBEXC@
SYSROOT_CFLAGS_FOR_TARGET = @SYSROOT_CFLAGS_FOR_TARGET@
	sysroot_headers_suffix='$${sysroot_headers_suffix}'; \
	    sysroot_headers_suffix=`echo $${ml} | sed -e 's/;.*$$//'`; \
	  sysroot_headers_suffix=`echo $${ml} | sed -e 's/;.*$$//'`; \
SYSTEM_HEADER_DIR = `echo @SYSTEM_HEADER_DIR@ | sed -e :a -e 's,[^/]*/\.\.\/,,' -e ta`
    # SYSTEM_HEADER_DIR is makefile syntax, cannot be evaluated in configure.ac
SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h \
       t='$(program_transform_name)'; echo ar | sed -e "$$t" ; \
       t='$(program_transform_name)'; echo ranlib | sed -e "$$t" ; \
       t='$(program_transform_name)'; echo strip | sed -e "$$t" ; \
TAGS: lang.tags
	 tar -cf - .; exit 0) | (cd $(DESTDIR)$(libsubdir)/include-fixed; tar xpf - )
	 tar -cf - .; exit 0) | (cd $(DESTDIR)$(libsubdir)/include-fixed; tar xpf - )
	 tar -cf - .; exit 0) | (cd $(DESTDIR)$(libsubdir)/include; tar xpf - )
# target and host overrides must follow the per-language makefile fragments
	TARGET_CPU_DEFAULT="" \
	TARGET_CPU_DEFAULT="" \
	TARGET_CPU_DEFAULT="" \
	TARGET_CPU_DEFAULT="" \
	TARGET_CPU_DEFAULT="" \
	TARGET_CPU_DEFAULT="$(target_cpu_default)" \
target_cpu_default=@target_cpu_default@
TARGET_DEF_H = target-def.h target-hooks-def.h $(HOOKS_H) targhooks.h
TARGET_DEF = target.def target-hooks-macros.h target-insns.def
	target=`echo "$@" | sed 's,//.*,,'`; \
	target-globals.o \
TARGET_H = $(TM_H) target.h $(TARGET_DEF) insn-modes.h insn-codes.h
					     target-hooks-def.h
target-hooks-def.h: s-target-hooks-def-h; @true
	    target_install_name=$(target_noncanonical)-`echo $$i|sed '$(program_transform_name)'` ; \
	  target_install_name=$(target_noncanonical)-`echo gcc-$$i|sed '$(program_transform_name)'`$(exeext) ; \
	    (TARGET_MACHINE='$(target)'; srcdir=`cd $(srcdir); ${PWD_COMMAND}`; \
target_noncanonical:=@target_noncanonical@
target_objdir := $(toplevel_builddir)/$(target_subdir)
# target overrides
# Target specific, C specific object file
# Target specific, C++ specific object file
# Target specific, D specific object file
# Target specific, Fortran specific object file
target_subdir = @target_subdir@
target_subdir=@target_subdir@
# Targets without dependencies, for use in prev-gcc during bootstrap.
	@TARGET_SYSTEM_ROOT_DEFINE@
  @TARGET_SYSTEM_ROOT_DEFINE@
  @TARGET_SYSTEM_ROOT_DEFINE@ \
	@TARGET_SYSTEM_ROOT_DEFINE@ -DPERSONALITY=\"ar\"
	@TARGET_SYSTEM_ROOT_DEFINE@ -DPERSONALITY=\"nm\"
	@TARGET_SYSTEM_ROOT_DEFINE@ -DPERSONALITY=\"ranlib\"
TARGET_SYSTEM_ROOT_DEFINE = @TARGET_SYSTEM_ROOT_DEFINE@
TARGET_SYSTEM_ROOT = @TARGET_SYSTEM_ROOT@
target=@target@
# Target to use when installing include directory.  Either
	targhooks.o \
T_CFLAGS =
TCFLAGS =
# T_CFLAGS is used for all compilations and is overridden by t-* files.
# TCFLAGS is used for compilations with the GCC just built.
	    TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \
	   TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \
tconfig.h: cs-tconfig.h ; @true
TCONFIG_H = tconfig.h $(xm_file_list)
# temporary file
	    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/c-family/c-target.def \
	    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/common/common-target.def \
	    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/d/d-target.def \
	  && ( test $(srcdir)/doc/tm.texi -nt $(srcdir)/target.def \
# TEST_ALWAYS_FLAGS are flags that should be passed to every compilation.
	@test -d $(TESTSUITEDIR)/$(check_p_subdir) || mkdir $(TESTSUITEDIR)/$(check_p_subdir)
	test -d $(TESTSUITEDIR)/$* || mkdir $(TESTSUITEDIR)/$*
	  test -d $(TESTSUITEDIR)/$*-parallel || mkdir $(TESTSUITEDIR)/$*-parallel || true; \
	-@test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)
	-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)
	-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)
	  test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR) || true; \
# test database configuration and that will be used for temporary
	-@test -d plugin || mkdir plugin
	-test -d plugin || mkdir plugin
	   || test -n "$(MULTILIB_OSDIRNAMES)"; then \
TESTSUITEDIR = testsuite
# testsuites like objc or go.
# Test to see whether <limits.h> exists in the system header files.
	test -z "$(dvidir)/gcc" || $(mkinstalldirs) "$(DESTDIR)$(dvidir)/gcc"
	test -z "$(htmldir)" || $(mkinstalldirs) "$(DESTDIR)$(htmldir)"
	test -z "$(pdfdir)/gcc" || $(mkinstalldirs) "$(DESTDIR)$(pdfdir)/gcc"
TEXI2DVI = texi2dvi
TEXI2HTML = $(MAKEINFO) --html
TEXI2PDF = texi2pdf
TEXI2POD = perl $(srcdir)/../contrib/texi2pod.pl
TEXI_CPP_FILES = cpp.texi fdl.texi cppenv.texi cppopts.texi		\
TEXI_CPPINT_FILES = cppinternals.texi gcc-common.texi gcc-vers.texi
TEXI_GCC_FILES = gcc.texi gcc-common.texi gcc-vers.texi frontends.texi	\
TEXI_GCCINSTALL_FILES = install.texi fdl.texi		\
TEXI_GCCINT_FILES = gccint.texi gcc-common.texi gcc-vers.texi		\
TFLAGS =
	"TFLAGS=$(TFLAGS)" \
# TFLAGS is also for the user to override, passed down from the top-level
T_GLIMITS_H = $(srcdir)/glimits.h
	    tgt=`echo "$$prop" | sed 's/=.*$$//'`; \
# that are used when linking.
# that don't exist in the distribution.
# The *.1, *.7, *.info, *.dvi, and *.pdf files are being generated from implicit
# The absolute path to the current directory.
# The backtrace library.
# the build-%: rule doesn't apply to them.
# the build tree, and so fixincl in the build tree will appear to be
# the built-in specs and installed as the default spec, as long as
# ??? The choices here will need some experimenting with.
# The command to use to invoke qmtest.
# The configure script will set this to collect2$(exeext), except on a
# The C++ version.
# the cwd, and has to check that we actually have a catalog
# the environment to account for automounters.  The make variable must not
# The first sed gets the list "header variables" as the list variables
# The flags to pass to qmtest.
# The flags to pass to "qmtest run".
# The following provides the variable ENABLE_MAINTAINER_RULES that can
# The following targets define the interface between us and the languages.
#the Free Software Foundation; either version 3, or (at your option)
# The full name of the driver on installation
# the gcc driver.
# The GCC to use for compiling crt*.o.
# the generated tm.texi; the latter might have a more recent timestamp,
# The gengtype generator program is special: Two versions are built.
# The host object files depend on CONFIG_H, and the build objects
# The idea is to parallelize testing of multilibs, for example:
# ??? the implicit rules dont trigger if the source file has a different name
# the input name, so our implicit %.pod rule will not work.
# The jit documentation looks better if built with sphinx, but can be
# the last objects to finish building.
# The line below is supposed to avoid accidentally matching the
# the list and add them.  This speeds up GNU Make, and allows -r to work.
# the machine description, the following static pattern rules run the
# the md file itself and the generated dependency file (in order to get
# The move-if-change + cp -p twists for limits.h are intended to preserve
	  ); then \
	  then \
	  then \
	  then \
# The name of the compiler to use.
# then do allow autoconf to be run.
	# then do install
			then echo po/gcc.pot; \
	 then echo "@set DEVELOPMENT"; \
# The new .po has to be gone over by hand, so we deposit it into
	      then multi_dir=""; \
	      then sleep 1; else exit 1; fi; \
# The only suffixes we want for implicit rules are .c and .o, so clear
# the .opt files
# the .opt files
# theoretically the -B won't be needed.
# The path to qmtest.
# The .pot file is left in the build directory.
# The practical upshot of these patterns is like this:
# The problem with this solution is that make thinks that tree-check.h is
# There are four levels of this:
# thereby updating the timestamp of fixincl.o in the host tree.
# The rules for compiling them should be in the t-* file for the machine.
# These are library modules...
# These are set by --enable-checking=valgrind.
# ...these are the programs themselves.
# These can't be made until after GCC can run.
# The sed command gets just the last file name component;
# The sed idiom for this is to repeat the search-and-replace until it doesn't match, using :a ... ta.
# These exist for maintenance purposes.
# These files are generated by running the same generator more than
# These files are to have specific diagnostics suppressed, or are not to
# These next rules exist because the output name is not the same as
# These permit overriding just for certain files.
# These programs are not linked with the MD reader.
# These programs need libs over and above what they get from the above list.
# These should be directories searched automatically by default
# These targets are for the dejagnu testsuites. The file site.exp
# The subdirectory of the OBJDIR that will be used to store the QMTest
# the target file.
# The targets for external use include:
# The tests (or suites) to run.
# the *.texi files have changed.
# the time stamp when we regenerate, to prevent pointless rebuilds during
# The tm.texi we want to compare against / check into svn should have
# The touch command is here to workaround an AIX/Linux NFS bug.
# The "; @true" construct forces Make to recheck the timestamp on
# The warning flags are separate from CFLAGS because people tend to
# they also introduce a rule to generate a file name specs, to be used
# They are compiled with $(COMPILER_FOR_BUILD), and associated libraries,
# They are passed first to allow individual tests to override them.
# they mean exactly the same thing for make.
THIN_ARCHIVE_SUPPORT = @thin_archive_support@
# things like the go/%.o rule work properly; but we use $(*F) for the
# This archive is strictly for the host.
# This does the things that can't be done on the host machine.
#This file is part of GCC.
# This follows what is done in shellutils, fileutils, etc.
# This is defined to "yes" if Tree checking is enabled, which roughly means
# This is how we control whether or not the additional warnings are applied.
# this is necessary because VPATH could add a dirname.
# This is only used for check-% targets that aren't parallelized.
# This is set by --disable-maintainer-mode (default) to "#"
# This is set by --enable-checking.  The idea is to catch forgotten
# This is the default target.
# This is the variable actually used when we compile. If you change this,
# This is the variable to use when using $(COMPILER).
# This is the variable to use when using $(LINKER).
# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.
# This is used only if the user explicitly asks for it.
# This is what is done in this makefile. Note that mkconfig.sh has a
# This is what is made with the host's compiler
# This is what must be made before installing GCC and converting libraries.
# This is what to compile if making a cross-compiler.
# This is where we get zlib from.  zlibdir is -L../zlib and zlibinc is
# This lists all host object files, whether they are included in this
# This lists all host objects for the front ends.
# This must come before the language makefile fragments to allow them to
# This notation should be acceptable to all Make implementations used
# This pulls in tm-pred.h which contains inline functions wrapping up
# this rule has no dependencies and always regenerates gcc.pot.  This is
# This rule has to look for .gmo modules in both srcdir and
# This should name the specs file that we're going to install.  Target
# This solution has a different problem. Since the time stamp of tree-check.h
# This symlink makes the full installation name of the driver be available
# This tells GNU make version 3 not to export the variables
# This vpath could be extended within the Make-lang fragments.
TIMEVAR_H = timevar.h timevar.def
	timevar.o \
tmake_file=@tmake_file@
tm-constrs.h: s-constrs-h; @true
tm_defines=@tm_defines@
tm_d_file_list=@tm_d_file_list@
tm_d.h: cs-tm_d.h ; @true
TM_D_H    = tm_d.h    $(tm_d_file_list)
tm_d_include_list=@tm_d_include_list@
TM_ENDIAN_CONFIG=@TM_ENDIAN_CONFIG@
tm_file_list=@tm_file_list@
TM_H      = $(GTM_H) insn-flags.h $(OPTIONS_H)
tm.h: cs-tm.h ; @true
tm_include_list=@tm_include_list@
TM_MULTILIB_CONFIG=@TM_MULTILIB_CONFIG@
TM_MULTILIB_EXCEPTIONS_CONFIG=@TM_MULTILIB_EXCEPTIONS_CONFIG@
	  > tmp-case-cfn-macros.h
	  > tmp-cfn-operators.pd
					     > tmp-common-target-hooks-def.h
					     > tmp-c-target-hooks-def.h
tmpdir = /tmp
					     > tmp-d-target-hooks-def.h
tm_p_file_list=@tm_p_file_list@
	    > tmp-generic-match.cc
	    > tmp-gimple-match.cc
tm_p.h: cs-tm_p.h ; @true
TM_P_H    = tm_p.h    $(tm_p_file_list)
tm_p_include_list=@tm_p_include_list@
	: > tmp-libgcc.mvars
	    > tmp-mlib.h; \
	    > tmp-mlib.h; \
	      >> tmp-omp-device-properties.h; \
	    >> tmp-omp-device-properties.h; \
tm-preds.h: s-preds-h; @true
       tm-preds.h tm-constrs.h \
 tm-preds.h tm-constrs.h checksum-options gimple-match.c generic-match.c \
					     > tmp-target-hooks-def.h
	    tmp-xlimits.h  tmp-limits.h; \
# to avoid confusion if the current directory is in the path
# to compile anything (without linking).
# to directories that might not exist yet.
# to do the install.
# to lang_checks_parallelized variable and define check_$lang_parallelize
	      tooldir_sysinc=`echo "${gcc_tooldir}/sys-include" | sed -e :a -e "s,[^/]*/\.\.\/,," -e ta`; \
# To parallelize some language check, add the corresponding check-$lang
top_builddir = .
# Top build directory for the "Cygnus tree", relative to $(top_builddir).
# Top build directory for this package, relative to here.
toplevel_builddir := ..
toplevel_builddir := ../..
  toplev.h $(DIAGNOSTIC_CORE_H) $(BASIC_BLOCK_H) $(HASH_TABLE_H) \
	toplev.o \
# To prevent this, one can add a stamp
# to programs compiled with GCC.
top_srcdir = @top_srcdir@
# to recursive makes.
# to the specified file.  Entries are written in chunks of
	    touch $${rootme}/$(TESTSUITEDIR)/$(check_p_tool)-parallel/finished; \
	-touch stmp-fixinc
	     | tr ' ' '\012' >> $(2)))
	tracer.o \
# translate the shell's notion of absolute pathnames to the native
	trans-mem.o \
	  *) tr -d '\r' < tmp-tm.texi > tmp2-tm.texi ;; \
	tree-affine.o \
	tree-call-cdce.o \
	tree-cfgcleanup.o \
	tree-cfg.o \
# tree-check.h: build/gencheck$(build_exeext)
# tree-check.h: build/gencheck$(build_exeext)
       tree-check.h genrtl.h insn-modes.h insn-modes-inline.h \
 tree-check.h min-insn-modes.c insn-modes.c insn-modes.h insn-modes-inline.h \
# tree-check.h: s-check
# tree-check.h: s-check; @true
tree-check.h: s-check ; @true
TREECHECKING = @TREECHECKING@
	tree-chkp.o \
	tree-chkp-opt.o \
	tree-chrec.o \
	tree-complex.o \
TREE_CORE_H = tree-core.h coretypes.h all-tree.def tree.def \
	tree-data-ref.o \
  tree.def builtins.def internal-fn.def case-cfn-macros.h $(CPPLIB_H)
  tree-dfa.h tree-hasher.h tree-nested.h tree-object-size.h tree-outof-ssa.h \
	tree-dfa.o \
	tree-diagnostic.o \
TREE_DUMP_H = tree-dump.h $(SPLAY_TREE_H) $(DUMPFILE_H)
	tree-dump.o \
	tree-eh.o \
	tree-emutls.o \
TREE_H = tree.h $(TREE_CORE_H)  tree-check.h
	tree-if-conv.o \
TREE_INLINE_H = tree-inline.h
	tree-inline.o \
	tree-into-ssa.o \
  tree-iterator.h $(PLUGIN_H) $(TREE_SSA_H) langhooks.h incpath.h debug.h \
	tree-iterator.o \
	tree-loop-distribution.o \
	tree-nested.o \
	tree-nrv.o \
	tree.o \
	tree-object-size.o \
	tree-outof-ssa.o \
  tree-parloops.h tree-ssa-address.h tree-ssa-coalesce.h tree-ssa-dom.h \
	tree-parloops.o \
TREE_PASS_H = tree-pass.h $(TIMEVAR_H) $(DUMPFILE_H)
	tree-phinodes.o \
	tree-predcom.o \
TREE_PRETTY_PRINT_H = tree-pretty-print.h $(PRETTY_PRINT_H)
	tree-pretty-print.o \
	tree-profile.o \
	tree-scalar-evolution.o \
	tree-sra.o \
	tree-ssa-address.o \
		tree-ssa-alias.h
	tree-ssa-alias.h $(INTERNAL_FN_H) $(HASH_TABLE_H) is-a.h
  tree-ssa-alias.h $(INTERNAL_FN_H) gimple-fold.h tree-eh.h gimple-expr.h \
	tree-ssa-alias.o \
	tree-ssa-ccp.o \
	tree-ssa-coalesce.o \
	tree-ssa-copy.o \
	tree-ssa-dce.o \
	tree-ssa-dom.o \
	tree-ssa-dse.o \
	tree-ssa-forwprop.o \
TREE_SSA_H = tree-ssa.h tree-ssa-operands.h \
	tree-ssa-ifcombine.o \
	tree-ssa-live.o \
	tree-ssa-loop-ch.o \
  tree-ssa-loop.h tree-ssa-loop-ivopts.h tree-ssa-loop-manip.h \
	tree-ssa-loop-im.o \
	tree-ssa-loop-ivcanon.o \
	tree-ssa-loop-ivopts.o \
	tree-ssa-loop-manip.o \
  tree-ssa-loop-niter.h tree-ssa-ter.h tree-ssa-threadedge.h \
	tree-ssa-loop-niter.o \
	tree-ssa-loop.o \
	tree-ssa-loop-prefetch.o \
	tree-ssa-loop-unswitch.o \
	tree-ssa-math-opts.o \
	tree-ssanames.o \
	tree-ssa.o \
	tree-ssa-operands.o \
	tree-ssa-phionlycprop.o \
	tree-ssa-phiopt.o \
	tree-ssa-phiprop.o \
	tree-ssa-pre.o \
	tree-ssa-propagate.o \
	tree-ssa-reassoc.o \
	tree-ssa-sccvn.o \
	tree-ssa-scopedtables.o \
	tree-ssa-sink.o \
	tree-ssa-strlen.o \
	tree-ssa-structalias.o \
	tree-ssa-tail-merge.o \
	tree-ssa-ter.o \
	tree-ssa-threadbackward.o \
	tree-ssa-threadedge.o \
  tree-ssa-threadupdate.h inchash.h wide-int.h signop.h hash-map.h \
	tree-ssa-threadupdate.o \
	tree-ssa-uncprop.o \
	tree-ssa-uninit.o \
	tree-stdarg.o \
	tree-streamer-in.o \
	tree-streamer.o \
	tree-streamer-out.o \
	tree-switch-conversion.o \
	tree-tailcall.o \
	tree-vect-data-refs.o \
	tree-vect-generic.o \
	tree-vect-loop-manip.o \
	tree-vect-loop.o \
	tree-vectorizer.o \
	tree-vect-patterns.o \
	tree-vect-slp.o \
	tree-vect-stmts.o \
	tree-vrp.o \
# "true" if the target C library headers are unavailable; "false"
	tsan.o \
T_STDINT_GCC_H = $(srcdir)/ginclude/stdint-gcc.h
# turned on.  These flags are also used to pass other stage dependent
	ubsan.o \
# unimportant, just the number of them matters.
# uninstall,
uninstall: lang.uninstall
# uninstall, TAGS, mostlyclean, clean, distclean, maintainer-clean.
# unix-style line endings.  To make this work on MinGW, remove \r.
# Unless a full pathname is provided, some shells would print the new CWD,
unlibsubdir = ../../..
unlibsubdir = ../../../../..
# unnecessarily when tree-check.h is unchanged. To make this, tree-check.h
# UNSORTED
# UNSORTED
# UNSORTED
# UNSORTED
# UNSORTED
update-po: $(CATALOGS:.gmo=.pox)
# Update the tags table.
# Used by gcc/jit/Make-lang.in
# Used from ada/gcc-interface/Make-lang.in
# Used from d/Make-lang.in
# Used in install-cross.
# Used to produce a relative $(gcc_tooldir) in gcc.o
USE_GCC_STDINT = @use_gcc_stdint@
#    useless for installation purposes and would rely on improper headers.
USE_NLS = @USE_NLS@
USER_H = $(srcdir)/ginclude/float.h \
USER_H_INC_NEXT_POST = @user_headers_inc_next_post@
USER_H_INC_NEXT_PRE = @user_headers_inc_next_pre@
# Use single quotes here to avoid nested double- and backquotes, this
# Use "s-selftest-FE" to ensure that we only run the selftests if the
# Use the genmultilib shell script to generate the information the gcc
# Use the "pic" build of libiberty if --enable-host-shared, unless we are
# Use the QMTest GUI.
USE_THIN_ARCHIVES = no
USE_THIN_ARCHIVES = yes
# Use this target to install the program `collect2' under the name `collect2'.
# Using basename would be simpler, but some systems don't have it.
# using -dumpspecs.  We remove any old version because it would
# `/usr'.
# Usually the one we just built.
VALGRIND_DRIVER_DEFINES = @valgrind_path_defines@
	valtrack.o \
	value-prof.o \
	varasm.o \
	vardots=`echo "$$variant" | sed 's,/,.,g'`; \
# Variables for version information.
# Variables that exist for you to override.
# variable.  This is the upper limit to which it is useful to parallelize the
	variant=`echo "$@" | sed 's,^[^/]*//,,'`; \
	varpool.o \
	var-tracking.o \
VEC_H = vec.h statistics.h $(GGC_H)
	vec.o input.o hash-table.o ggc-none.o memory-block.o \
version     := $(shell @get_gcc_base_ver@ $(BASEVER))
  version.h stringpool.h gimplify.h gimple-iterator.h gimple-ssa.h \
version.h: s-version; @true
	       -v header_name="config.h system.h coretypes.h options.h tm.h" < $< > $@
	       -v header_name="config.h system.h coretypes.h tm.h" < $< > $@
	vmsdbgout.o \
VPATH = @srcdir@
vpath %.texi $(gcc_docdir)
vpath %.texi $(gcc_docdir)/include
	vtable-verify.o \
.-warn = $(STRICT_WARN)
WARN_CFLAGS = @warn_cflags@
WARN_CXXFLAGS = @warn_cxxflags@
# We also need to pass -L ../ld so that the linker can find ldscripts.
	web.o \
# We call this executable `xgcc' rather than `gcc'
# we can avoid introducing dependencies of the front ends on things that
# We define a vpath for the sources of the .texi files here because they
# We don't want to compile the compilers with -fPIE, it make PCH fail.
# We do want to create an executable named `xgcc', so we can use it to
# we explicitly use $(srcdir)/doc/tm.texi here to avoid confusion with
# we just hard-code.
# We keep the directory structure for files in config, common/config or
# We no longer install the specs file because its presence makes the
# We put the *-match.o and insn-*.o files first so that a parallel make
# We remove as much from the language subdirectories as we can
	# we trigger a headers rebuild.
# We use a different pathname here to avoid a circular dependency.
# We use `pwd`/include instead of just include to problems with CDPATH
# When running the tests we set GCC_EXEC_PREFIX to the install tree so that
# Where cpp should go besides $prefix/bin if necessary
# where the info files go
# where the locale files go
# Where to find decNumber
# Where to find some libiberty headers.
# whether making a cross compiler or not.
# Whether we were configured with NLS.
# which is only compiled with gcc, such as libgcc.
# while building and installing GCC.
  while test $$cnt2 -le $(1); do msg="$${msg}=="; cnt2=`expr $$cnt2 + 1`; idx=`expr $$idx + 1`; done; \
  while test $$cnt -le $(1); do msg="$${msg}=="; cnt=`expr $$cnt + 1`; done; \
  while test $$cnt -lt $(1); do msg="$${msg}>>"; cnt=`expr $$cnt + 1`; done; \
  while test $$cnt -lt $(SERIAL_COUNT); do msg="$${msg}  "; cnt=`expr $$cnt + 1`; done; \
# while TM_H lists the ones ordinary gcc files depend on, which
	wide-int.o \
	wide-int-print.o \
# will build them sooner, because they are large and otherwise tend to be
# will run 3 concurrent sessions of check-gcc, eventually testing
# win against random include files in /usr/include.
# Wire in install-gnatlib invocation with `make install' for a configuration
# with a forward slash if one is not already present.  This is not a
with_cpu = @with_cpu@
with_float = @with_float@
# with other compilers.
# without optimization.
# with the distribution.
# with top-level libada disabled.
# working directory in object files (-g absent, or -fno-working-dir
# would never come up.  As it turns out, if you use ccache with
write_entries_to_file = $(shell rm -f $(2) || :) $(shell touch $(2)) \
write_entries_to_file_split = 50
# write_entries_to_file - writes each entry in a list
# write it out to a file (taking care not to do that in a way that
	xcoffout.o \
xgcc$(exeext): $(GCC_OBJS) c/gccspec.o libcommon-target.a $(LIBDEPS) \
 xgcc$(exeext) cpp$(exeext) $(FULL_DRIVER_NAME) \
XGETTEXT = @XGETTEXT@
xmake_file=@xmake_file@
xm_defines=@xm_defines@
xm_file_list=@xm_file_list@
xm_include_list=@xm_include_list@
XREGEX_H    = $(srcdir)/../include/xregex.h
.y.c:
# you probably want to update BUILD_CFLAGS in configure.ac
#You should have received a copy of the GNU General Public License
ZLIBINC = @zlibinc@
ZLIB = @zlibdir@ -lz
ZSTD_INC = @ZSTD_CPPFLAGS@
ZSTD_LIB = @ZSTD_LDFLAGS@ @ZSTD_LIB@
